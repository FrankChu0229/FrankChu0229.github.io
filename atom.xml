<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank Chu</title>
  <icon>https://www.gravatar.com/avatar/7c04e9129318ea2b45bdf06f71529116</icon>
  <subtitle>The world need dreamers who do.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://frankchu0229.github.io/"/>
  <updated>2018-03-05T04:07:47.517Z</updated>
  <id>http://frankchu0229.github.io/</id>
  
  <author>
    <name>Frank Chu</name>
    <email>chushb@shanghaitech.edu.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven Summary</title>
    <link href="http://frankchu0229.github.io/2018/03/05/maven-notes/"/>
    <id>http://frankchu0229.github.io/2018/03/05/maven-notes/</id>
    <published>2018-03-05T04:00:45.000Z</published>
    <updated>2018-03-05T04:07:47.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Show-all-dependencies"><a href="#Show-all-dependencies" class="headerlink" title="Show all dependencies"></a>Show all dependencies</h2><ul><li><code>mvn dependency:tree</code></li></ul><h2 id="RM-dependnecy-in-pom"><a href="#RM-dependnecy-in-pom" class="headerlink" title="RM dependnecy in pom"></a>RM dependnecy in pom</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;exclusions&gt;</div><div class="line">  &lt;exclusion&gt;</div><div class="line">    &lt;groupId&gt;com.group&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;name&lt;/artifactId&gt;</div><div class="line">  &lt;/exclusion&gt;</div><div class="line">&lt;/exclusions&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Show-all-dependencies&quot;&gt;&lt;a href=&quot;#Show-all-dependencies&quot; class=&quot;headerlink&quot; title=&quot;Show all dependencies&quot;&gt;&lt;/a&gt;Show all dependencies&lt;/
      
    
    </summary>
    
    
      <category term="java" scheme="http://frankchu0229.github.io/tags/java/"/>
    
      <category term="maven" scheme="http://frankchu0229.github.io/tags/maven/"/>
    
      <category term="package management" scheme="http://frankchu0229.github.io/tags/package-management/"/>
    
  </entry>
  
  <entry>
    <title>Ali Xiaomi Transfer Learning</title>
    <link href="http://frankchu0229.github.io/2018/03/04/transfer-learning-alimi/"/>
    <id>http://frankchu0229.github.io/2018/03/04/transfer-learning-alimi/</id>
    <published>2018-03-04T06:23:42.000Z</published>
    <updated>2018-03-05T04:02:54.230Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DrQA</title>
    <link href="http://frankchu0229.github.io/2018/03/04/drqa/"/>
    <id>http://frankchu0229.github.io/2018/03/04/drqa/</id>
    <published>2018-03-04T06:23:23.000Z</published>
    <updated>2018-03-05T04:02:25.686Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Design Pattern</title>
    <link href="http://frankchu0229.github.io/2018/02/27/design-pattern/"/>
    <id>http://frankchu0229.github.io/2018/02/27/design-pattern/</id>
    <published>2018-02-27T09:21:54.000Z</published>
    <updated>2018-03-05T04:02:12.669Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java中的String, StringBuilder和 StringBuffer</title>
    <link href="http://frankchu0229.github.io/2018/02/26/java-notes/"/>
    <id>http://frankchu0229.github.io/2018/02/26/java-notes/</id>
    <published>2018-02-26T15:05:41.000Z</published>
    <updated>2018-02-27T01:56:20.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StringBuilder-与-StringBuffer"><a href="#StringBuilder-与-StringBuffer" class="headerlink" title="StringBuilder 与 StringBuffer"></a>StringBuilder 与 StringBuffer</h2><ul><li>StringBuilder 执行速度比StringBuffer要快，但是StringBuilder不是线程安全的</li><li>StringBuffer 是线程安全的，执行速度比StringBuilder要慢</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>在java中，String字符串常量是不可改变的对象，每当在String上进行操作时，实际上都是在创建一个新的String对象。以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. String s = &quot;abx&quot;;</div><div class="line">2. String s = s + &quot;ds&quot;;</div></pre></td></tr></table></figure><p>其中，第二行中的<code>s</code>会被重新创建，原来的对象会被GC掉。而StringBuilder和StringBuffer是可变对象，在同一个对象上进行操作。</p><p>值得注意的一点是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = &quot;this &quot; + &quot;is &quot; + &quot;my &quot; + &quot;home&quot;</div></pre></td></tr></table></figure><p>等同于<code>String s = &quot;This is my home&quot;</code>, 在这种情况下String操作要比StringBuilder和StringBuffer要快，是JVM的一个把戏。但是当字符串拼接中有其他的String变量时，JVM就会按照原来的方式来做。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://www.cnblogs.com/A_ming/archive/2010/04/13/1711395.html" target="_blank" rel="external">http://www.cnblogs.com/A_ming/archive/2010/04/13/1711395.html</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      Java 中的String, StringBuilder和 StringBuffer
    
    </summary>
    
      <category term="java" scheme="http://frankchu0229.github.io/categories/java/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="java" scheme="http://frankchu0229.github.io/tags/java/"/>
    
      <category term="engineering" scheme="http://frankchu0229.github.io/tags/engineering/"/>
    
  </entry>
  
  <entry>
    <title>Python Coding Style</title>
    <link href="http://frankchu0229.github.io/2018/02/11/python-coding-style/"/>
    <id>http://frankchu0229.github.io/2018/02/11/python-coding-style/</id>
    <published>2018-02-11T08:06:46.000Z</published>
    <updated>2018-02-11T08:25:02.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Name-Convention"><a href="#Name-Convention" class="headerlink" title="Name Convention"></a>Name Convention</h2><ul><li>module_name, </li><li>package_name, </li><li>ClassName, </li><li>method_name, </li><li>ExceptionName, </li><li>function_name, </li><li>GLOBAL_CONSTANT_NAME, </li><li>global_var_name, </li><li>instance_var_name, </li><li>function_parameter_name, </li><li>local_var_name</li><li>CLASS_CONSTANT_NAME</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://google.github.io/styleguide/pyguide.html" target="_blank" rel="external">Goole Python Coding Style</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      Python coding style summary.
    
    </summary>
    
      <category term="coding style" scheme="http://frankchu0229.github.io/categories/coding-style/"/>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/coding-style/python/"/>
    
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="coding style" scheme="http://frankchu0229.github.io/tags/coding-style/"/>
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Cuda Notes</title>
    <link href="http://frankchu0229.github.io/2018/02/08/cuda-notes/"/>
    <id>http://frankchu0229.github.io/2018/02/08/cuda-notes/</id>
    <published>2018-02-08T07:32:14.000Z</published>
    <updated>2018-02-11T08:23:48.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nvidia-CUDA-9-1-Install"><a href="#Nvidia-CUDA-9-1-Install" class="headerlink" title="Nvidia CUDA 9.1 Install"></a>Nvidia CUDA 9.1 Install</h2><ul><li>download <strong>runfile</strong> from <a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1604&amp;target_type=runfilelocal" target="_blank" rel="external">here</a></li><li>install according to the <a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1604&amp;target_type=runfilelocal" target="_blank" rel="external">instructions</a></li><li>add the path, i.e. PATH and LD_LIBRARY_PATH, to your <code>~/.bashrc</code> like this:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=$PATH:/usr/local/cuda-9.1/bin/</div><div class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-9.1/lib64</div></pre></td></tr></table></figure><h2 id="NVCC-Usage"><a href="#NVCC-Usage" class="headerlink" title="NVCC Usage"></a>NVCC Usage</h2><ul><li>show version: <code>nvcc --version</code></li><li>show help: <code>nvcc --help</code></li></ul><h2 id="查看nvidia-gpu-使用情况"><a href="#查看nvidia-gpu-使用情况" class="headerlink" title="查看nvidia gpu 使用情况"></a>查看nvidia gpu 使用情况</h2><ul><li><code>nvidia-smi</code></li></ul><hr>]]></content>
    
    <summary type="html">
    
      CUDA Notes
    
    </summary>
    
      <category term="notes" scheme="http://frankchu0229.github.io/categories/notes/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="ubuntu" scheme="http://frankchu0229.github.io/tags/ubuntu/"/>
    
      <category term="cuda" scheme="http://frankchu0229.github.io/tags/cuda/"/>
    
      <category term="DL" scheme="http://frankchu0229.github.io/tags/DL/"/>
    
  </entry>
  
  <entry>
    <title>Mac Cassandra Notes</title>
    <link href="http://frankchu0229.github.io/2018/01/04/cassandra-note/"/>
    <id>http://frankchu0229.github.io/2018/01/04/cassandra-note/</id>
    <published>2018-01-04T12:57:32.000Z</published>
    <updated>2018-01-04T13:00:26.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac-cassandra-install"><a href="#Mac-cassandra-install" class="headerlink" title="Mac cassandra install"></a>Mac cassandra install</h2><p><a href="https://gist.github.com/hkhamm/a9a2b45dd749e5d3b3ae" target="_blank" rel="external">Install Instructions</a></p><h2 id="Mac-Cassandra-start-and-stop"><a href="#Mac-Cassandra-start-and-stop" class="headerlink" title="Mac Cassandra start and stop"></a>Mac Cassandra start and stop</h2><ul><li>start: <code>brew services start cassandra</code></li><li>stop: <code>brew services stop cassandra</code></li></ul><hr>]]></content>
    
    <summary type="html">
    
      Mac cassandra summary。
    
    </summary>
    
      <category term="notes" scheme="http://frankchu0229.github.io/categories/notes/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="cassandra" scheme="http://frankchu0229.github.io/tags/cassandra/"/>
    
      <category term="shell" scheme="http://frankchu0229.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL Summary</title>
    <link href="http://frankchu0229.github.io/2017/12/18/NoSQL/"/>
    <id>http://frankchu0229.github.io/2017/12/18/NoSQL/</id>
    <published>2017-12-18T07:25:39.000Z</published>
    <updated>2018-01-10T03:27:59.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoSQL-Summary"><a href="#NoSQL-Summary" class="headerlink" title="NoSQL Summary"></a>NoSQL Summary</h1><p>NoSQL指 not only SQL, 主要包括：</p><h3 id="Key-value-Redis-分布式：Codis"><a href="#Key-value-Redis-分布式：Codis" class="headerlink" title="Key-value: Redis, 分布式：Codis"></a><strong>Key-value: Redis, 分布式：Codis</strong></h3><p>以键值对的方式进行存储，其内部通常用哈希表的结构来对数据进行存储。在使用时，用户只需要根据key来访问即可。优点：对单条数据的增删改查非常迅速；缺点：数据库不知道对于数据本身的任何信息，往往需要对数据库中的数据进行遍历，<strong>不支持索引</strong>。<strong>Key-value型数据库通常在服务中作为缓存端使用</strong>，例如可作为MYSQL的缓存端使用，可使得服务性能提高10+倍。</p><h3 id="Document-based-mongoDB"><a href="#Document-based-mongoDB" class="headerlink" title="Document-based: mongoDB"></a><strong>Document-based: mongoDB</strong></h3><p>与Key-value数据库不同，Document-based 数据库中存储的不再是字符串，而是像JSON, XML等具有特定格式的文档。这些文档可以记录键值对，数组，或者是内嵌的文档。<strong>Document-based</strong>数据库常常支持索引，因此<strong>Document-based</strong>数据库既保留了key-value型数据库的便利，又在查询上借助索引可以达到不错的性能。</p><h3 id="Column-based-cassandra-Hbase"><a href="#Column-based-cassandra-Hbase" class="headerlink" title="Column-based: cassandra, Hbase"></a><strong>Column-based: cassandra, Hbase</strong></h3><p>按照列来在数据文件中记录数据，以便获得更好的遍历和请求效率，但并不是所有的数据都用列来存储，一般只有需要请求的数据会用列来存储。</p><h3 id="Graph-based-neo4j-janus-graph-dgraph"><a href="#Graph-based-neo4j-janus-graph-dgraph" class="headerlink" title="Graph-based: neo4j, janus graph, dgraph"></a><strong>Graph-based: neo4j, janus graph, dgraph</strong></h3><p>图数据库存储的时候是以图的形式保存的，对应底层数据结构是邻接表。</p><ul><li>图数据库查关系的时候速度很快；传统关系型数据库在查关系的时候需要join很多张表，速度比较慢。</li><li>传统关系型数据库存储的数据是结构化的，表的字段是固定的，数据规整，省空间，但是需要提前设计好表的结构，改动表结构代价比较大。图数据库的字段是不固定的，不用提前设计表的结构，改schema的代价很小。</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/loveis715/p/5299495.html" target="_blank" rel="external">https://www.cnblogs.com/loveis715/p/5299495.html</a></li><li><a href="https://www.cnblogs.com/aspwebchh/p/6652855.html" target="_blank" rel="external">https://www.cnblogs.com/aspwebchh/p/6652855.html</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      NoSQL Summary。
    
    </summary>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="NoSQL" scheme="http://frankchu0229.github.io/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Vimium Notes</title>
    <link href="http://frankchu0229.github.io/2017/12/04/vimium-notes/"/>
    <id>http://frankchu0229.github.io/2017/12/04/vimium-notes/</id>
    <published>2017-12-04T12:30:24.000Z</published>
    <updated>2017-12-04T12:46:35.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vimium-Introduction"><a href="#Vimium-Introduction" class="headerlink" title="Vimium Introduction"></a>Vimium Introduction</h2><p>Vimium 是chrome浏览器中的一款非常好用的插件，通过vimium，你将告别鼠标和触摸板，开始各种神操作。</p><h2 id="Vimium-Summary-Picture"><a href="#Vimium-Summary-Picture" class="headerlink" title="Vimium Summary Picture"></a>Vimium Summary Picture</h2><p><img src="/img/vimium.png" alt="Vimium Summary"></p><h2 id="Vimium-Summary"><a href="#Vimium-Summary" class="headerlink" title="Vimium Summary"></a>Vimium Summary</h2><p>同vim使用比较相似，常用的vimium操作有</p><ul><li><code>j</code> 向下翻， <code>d</code>向下翻页</li><li><code>k</code> 向上翻， <code>u</code>向上翻页</li><li><code>h</code> 向左翻， <code>l</code> 向右翻</li><li><code>x</code> 关闭当前页面， <code>X</code>回复关闭页面</li><li><code>t</code> 新建网页标签</li><li><code>yy</code> 粘贴当前网页链接</li><li><code>gg</code> 到网页顶端，<code>G</code>到网页底端</li><li><code>T</code> 查看当前浏览器所有网页</li><li><code>o</code> 打开浏览历史、标签；<code>O</code> 在新的标签页中打开</li><li><code>r</code> 重新加载标签页</li><li><code>f</code> 打开当前网页中的链接</li><li><code>/</code> 进入搜索模式， <code>n</code> 向下搜， <code>N</code>往回搜</li></ul>]]></content>
    
    <summary type="html">
    
      Vimium 是chrome浏览器中的一款非常好用的插件，通过vimium，你将告别鼠标和触摸板，开始各种神操作
    
    </summary>
    
      <category term="vimium" scheme="http://frankchu0229.github.io/categories/vimium/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="vim" scheme="http://frankchu0229.github.io/tags/vim/"/>
    
      <category term="tools" scheme="http://frankchu0229.github.io/tags/tools/"/>
    
      <category term="chrome" scheme="http://frankchu0229.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>TF Symposium 1.4.0 Summary</title>
    <link href="http://frankchu0229.github.io/2017/10/25/tf_symposium/"/>
    <id>http://frankchu0229.github.io/2017/10/25/tf_symposium/</id>
    <published>2017-10-25T08:15:23.000Z</published>
    <updated>2017-10-30T12:28:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TF-Symposium-Summary"><a href="#TF-Symposium-Summary" class="headerlink" title="TF Symposium Summary"></a>TF Symposium Summary</h1><h2 id="L2L-with-进化算法-by-YiFei-Feng"><a href="#L2L-with-进化算法-by-YiFei-Feng" class="headerlink" title="L2L with 进化算法 by YiFei Feng"></a>L2L with 进化算法 by YiFei Feng</h2><ul><li>循环网络： 控制器； </li><li>evolution algo： 淘汰 -&gt; 变异</li><li>用简单的模型初始化</li><li>重复进化步骤</li></ul><h2 id="TF-与-生物学"><a href="#TF-与-生物学" class="headerlink" title="TF 与 生物学"></a>TF 与 生物学</h2><ul><li>生物大数据</li><li>机器学习问题： regression，classification</li><li>Deep Variant: inception-v3,将在第四季或明年开源</li></ul><h2 id="TF-性能-by-Frank-Chen"><a href="#TF-性能-by-Frank-Chen" class="headerlink" title="TF 性能 by Frank Chen"></a>TF 性能 by Frank Chen</h2><ul><li>出现性能问题： 了解问题， 用分析器：</li><li>Timeline TF自带分析器, 用chrome打开profile文件， 查看瓶颈</li><li>复制内存：复制越多， tf运算图越慢</li><li>如何改进： 1. 优化输入管道， 使用流水线； 2. 优化模型计算， 使用fuzed batch-norm, 使得在GPU上更快；3. 数据格式， CPU，GPU数据格式； 4. 运算图， matcol； 5. 单GPU变量：变量放到一个GPU即可； 单机多GPU， 可以尝试使用GPU来作为变量ser ver；变量过大或者过多， 多GPU共享变量； 多机多GPU， 通过网络赋值内存，比单机慢；可以使用local CPU做cache； 高级分布式培训模式：在每一个GPU集群内部，使用一个GPU作为parameter server，在外部用cpu做cache。</li></ul><h2 id="TF-机器人应用-by-Pi-Chuan-Chang"><a href="#TF-机器人应用-by-Pi-Chuan-Chang" class="headerlink" title="TF 机器人应用 by Pi-Chuan Chang"></a>TF 机器人应用 by Pi-Chuan Chang</h2><ul><li>Challenges: safety, control, transfer</li><li>Minitaur: -&gt; robot platform</li><li>openAI Gym environemt interface -&gt; environment</li><li>agnet: 树莓派； 微控制器计算能力不足</li><li>ARChirecture: signal generator (sin() function -&gt; 周期性) + balanbce controller(Fully connected layers) -&gt; actions </li><li>transfer to real robot: system identification, env randomization</li></ul><h2 id="TF-高层API-by-Yifei-Feng"><a href="#TF-高层API-by-Yifei-Feng" class="headerlink" title="TF 高层API by Yifei Feng"></a>TF 高层API by Yifei Feng</h2><ul><li>Keras： 高层神经网络API， 默认使用tf作为后端</li><li>tf.keras: 自定义的tf后端，change: from keras -&gt; from tensorflow.keras</li><li><p>tf.layers and tf.keras.layers, 共享实现方式，基本上相同</p></li><li><p>Estimators: canned estimators, 实现好的模型</p></li><li>keras 模型 -&gt; model_to_estimator -&gt; estimator model</li></ul><h3 id="Distributed-TF"><a href="#Distributed-TF" class="headerlink" title="Distributed TF"></a>Distributed TF</h3><ul><li>tf的一个很大优势， dev summit 2017</li><li>estimators 可进行分布式执行</li><li>1.4 版本中找到</li></ul><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><ul><li>使用可以使用的最高层的API</li><li>用tf.layers and tf.keras 编写自定义模型</li><li>分布式训练 Estimators， 大部分情况下最好的选择</li></ul><h3 id="TF-Serving"><a href="#TF-Serving" class="headerlink" title="TF Serving"></a>TF Serving</h3><ul><li>github.com/tensorflow/serving</li><li>c++ libraries ： tf模型保存/输出格式； 通用核心模式</li><li>tf serving binariesL开箱急用的最佳实践， Docker容器， K8s教程</li></ul><h3 id="get-it"><a href="#get-it" class="headerlink" title="get it"></a>get it</h3><ul><li>pip apt-get 安装</li><li>www.tf.org/serving</li></ul><h2 id="TF-Lite（On-Smart-Devices）"><a href="#TF-Lite（On-Smart-Devices）" class="headerlink" title="TF Lite（On Smart Devices）"></a>TF Lite（On Smart Devices）</h2><ul><li>offline running on small devices</li><li>low-bandwidth, latency, power</li><li>Chanllenges: bandwith memory computation cpus</li><li>Tf works well on large services, tf-lite works on small devices</li><li>small binary size, low-overhead, optimized set of kernels</li><li>four parts: intepreter (optimized for all devices: few dependencies, small library less than 300k, fast load time, static memory plan, but no control flow), OPs/ kernels (NEON on ARM, Float &amp; quantized, many kernels for mobile apps), model file format (flatbuffers) mmap, more efficient than protocol buffer ; Hardware Acceleration (e.g., Android: Neural Network API; IOS: Core ML); Neural Network API: Part of Android Framework, tries to use as much hardware as possible. </li></ul><h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><ul><li>Developer preview: C++ and JAVA API</li><li>TOCO Converter</li><li>A set of builtin ops</li><li>Demo applications</li><li>Example models</li><li>MobileNet(Float)</li></ul><h2 id="Teaching-Machines-to-Draw"><a href="#Teaching-Machines-to-Draw" class="headerlink" title="Teaching Machines to Draw"></a>Teaching Machines to Draw</h2><ul><li>sketch-RNN: K encoder -&gt; Z (Latent Space Vectors)-&gt; Decoder </li></ul><hr>]]></content>
    
    <summary type="html">
    
      TF Symposium Summary
    
    </summary>
    
      <category term="tensorflow" scheme="http://frankchu0229.github.io/categories/tensorflow/"/>
    
      <category term="notes" scheme="http://frankchu0229.github.io/categories/tensorflow/notes/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="tensorflow" scheme="http://frankchu0229.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Dive Into Python3 Notes Native Datatypes</title>
    <link href="http://frankchu0229.github.io/2017/10/19/Dive%20Into%20Python3%20Notes%20-%20Native%20Datatypes/"/>
    <id>http://frankchu0229.github.io/2017/10/19/Dive Into Python3 Notes - Native Datatypes/</id>
    <published>2017-10-19T08:15:23.000Z</published>
    <updated>2017-11-02T03:16:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dive-Into-Python3-Notes-Native-Datatypes"><a href="#Dive-Into-Python3-Notes-Native-Datatypes" class="headerlink" title="Dive Into Python3 Notes - Native Datatypes"></a>Dive Into Python3 Notes - Native Datatypes</h1><p>在python中，任何value都有type，但是你不需要显式地声明value的类型。Python根据该变量第一次被赋值的不同来对该变量的类型做出推断。</p><p>Python中主要的数据类型有：</p><ul><li>Boolean： <code>True</code> or <code>False</code></li><li>Numbers： they can be integers，floats，fractions(1/3) and even complex numbers</li><li>Strings: an sequence of Unicode characters</li><li>Bytes and byte arrays: e.g., an jpeg image</li><li>List: ordered sequence of values</li><li>Set: <strong>unordered</strong> sequence of values</li><li>Tuple: ordered and <strong>immutable</strong> sequence of values</li><li>Dict: unordered key-value pairs</li></ul><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><ul><li>use <code>type()</code> and <code>isinstance()</code> to get the datatype and judge</li><li>use <code>int(2.0)</code> and <code>float(1)</code>, <code>int(-2.5) = -2</code> 来做type转换</li><li>float numbers 小数点后最多只能有15位</li><li>与python2既有int又有long不同， python3中只有int， 并且int可以取得像python2中long的最大值</li></ul><h3 id="Number-Operations"><a href="#Number-Operations" class="headerlink" title="Number Operations"></a>Number Operations</h3><ul><li><code>/</code> 除法， 返回float类型</li><li><code>//</code> 整数除法： <code>11 // 2 = 5</code>, <code>-11 // 2 = -6</code> </li><li><code>**</code> 幂操作</li><li><code>%</code> 取余数</li></ul><h3 id="分数-Fractions"><a href="#分数-Fractions" class="headerlink" title="分数 Fractions"></a>分数 Fractions</h3><ul><li>使用 <code>import fractions</code>, <code>print(fractions.Fraction(1, 3))</code></li></ul><h3 id="其他数字"><a href="#其他数字" class="headerlink" title="其他数字"></a>其他数字</h3><ul><li>PI : <code>import math</code>, <code>print(math.pi)</code></li><li>需要注意的是python中没有infinite的精度， 因此像<code>sin(\pi)</code>的结果不是0， 而是一个很小的数</li></ul><h3 id="数字用在-bolean-context"><a href="#数字用在-bolean-context" class="headerlink" title="数字用在 bolean context"></a>数字用在 bolean context</h3><ul><li>如果数字的value为0， 则为False； 否则为True</li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>Python中list大小可以动态改变，并且list中可以add各种不同类型的value。</p><h3 id="Define-a-list"><a href="#Define-a-list" class="headerlink" title="Define a list"></a>Define a list</h3><p>Define a list <code>a = []</code> or <code>a = [1, &#39;hello&#39;, 1.0, [1,2,3]]</code></p><h3 id="Get-the-values-from-the-list"><a href="#Get-the-values-from-the-list" class="headerlink" title="Get the values from the list"></a>Get the values from the list</h3><p>Get the values from the list: <code>a[0], a[1], a[2], a[3]</code> or <code>a[-1], a[-2], a[-3], a[-4]</code></p><h3 id="Slicing-the-list"><a href="#Slicing-the-list" class="headerlink" title="Slicing the list"></a>Slicing the list</h3><p>Slicing the list: <code>a[1:3]</code> can get the sublist of <code>a[0]</code> and <code>a[1]</code>, 即不包括最后的一位；如果前后有省略，则默认为从该list的第一位开始(包含)，或者到最后一位(包含)；如果前后都没有，则结果为整个list</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a[:2] -&gt; [1, &apos;hello&apos;]</div><div class="line">a[2:] -&gt; [1.0, [1,2,3]]</div></pre></td></tr></table></figure><h3 id="Adding-items-to-list"><a href="#Adding-items-to-list" class="headerlink" title="Adding items to list:"></a>Adding items to list:</h3><p>Four ways to add items to a list:</p><ul><li>Operation <code>+</code> : <code>a = [1, 2]</code>, <code>b = [2]</code>, <code>a = a + b -&gt; [1,2,2]</code>, 这里需要注意的是， <code>+</code>操作会new 一个新的list</li><li><code>a.append()</code>函数, <code>append()</code>函数会把append的内容(无论什么类型)加到list中, 例如： <code>a.append([4,5,6]) -&gt; a = [1,2,2,[4,5,6]]</code></li><li><code>a.extend([4,5,6])</code>函数会把extend的内容一个一个的加到list中， 得到<code>a = [1,2,2,4,5,6]</code></li><li><code>a.insert(0, &#39;4&#39;)</code>, 会把value插入到指定的index处</li></ul><h3 id="Searching-in-a-list"><a href="#Searching-in-a-list" class="headerlink" title="Searching in a list"></a>Searching in a list</h3><ul><li><code>a_list.count(&#39;a&#39;)</code>: return the number of specific values in a list</li><li><code>&#39;a&#39; in a_list</code>, return a boolean value to show if the value is in the list</li><li><code>a_list.index(&#39;a&#39;)</code> to return the index of the given value</li></ul><h3 id="Removing-items-in-a-list"><a href="#Removing-items-in-a-list" class="headerlink" title="Removing items in a list"></a>Removing items in a list</h3><ul><li><code>del a_list[1]</code> to delete the value in the index of 1</li><li><code>a_list.remove(&#39;a&#39;)</code> to remove the first occurance of the value in a list</li><li><code>a_list.pop()</code> removes the last value in a list</li><li><code>a_list.pop(0)</code> removes the value in the given index</li></ul><h3 id="List-in-a-boolean-context"><a href="#List-in-a-boolean-context" class="headerlink" title="List in a boolean context"></a>List in a boolean context</h3><ul><li>empty list will be <code>False</code> in a boolean context and list which is not empty will be <code>True</code>.</li></ul><h2 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h2><p>A tuple is an immutable list. A tuple cannot be changed once it is created.</p><p>Tuple和List比较像， tuple可以看做是一个不可变的list。Tuple比list更快，如果这个set是不会被更改的，则使用Tuple，同时它也会使你的code更加安全。</p><p>在Python中，只有immutable的才可以作为Dict 的key，如果tuple中的变量都是immutable的，那么</p><h3 id="Tuple的创建和获取元素"><a href="#Tuple的创建和获取元素" class="headerlink" title="Tuple的创建和获取元素"></a>Tuple的创建和获取元素</h3><ul><li><code>a_tuple = (1,2,3,Ture)</code>, Tuple用圆括号来创建，元素获取的方式同list</li><li>Tuple的slice方式<code>a_list[1:3]</code>同list，不同之处在于，tuple的slice返回的仍是tuple</li></ul><h3 id="Tuple中元素的操作"><a href="#Tuple中元素的操作" class="headerlink" title="Tuple中元素的操作"></a>Tuple中元素的操作</h3><ul><li>Tuple元素的操作不包括：如 <code>pop()</code>, <code>append()</code>等添加或者删除元素的函数</li><li>Tuple中可以使用<code>count()</code>和<code>index()</code>, <code>&#39;a&#39; in a_tuple</code>等操作 </li></ul><h3 id="Tuple-和-List的转换"><a href="#Tuple-和-List的转换" class="headerlink" title="Tuple 和 List的转换"></a>Tuple 和 List的转换</h3><ul><li><code>tuple()</code> functuon can convert list into tuples and <code>list()</code> function can convert tuples into list. </li></ul><h3 id="Tuples-in-boolean-context"><a href="#Tuples-in-boolean-context" class="headerlink" title="Tuples in boolean context"></a>Tuples in boolean context</h3><ul><li>同list一样， 在boolean context中，如果tuple为空，则返回False； 否则返回True</li><li>值得注意的是，在创建只有一个值的tuple时，应为<code>(False,)</code>；即需要加一个逗号”，“， 否则python无法识别出是带有一个值的tuple。</li></ul><h3 id="将tuple用来同时给多个变量赋值"><a href="#将tuple用来同时给多个变量赋值" class="headerlink" title="将tuple用来同时给多个变量赋值"></a>将tuple用来同时给多个变量赋值</h3><ul><li><code>(x, y, z) = (1,2,3)</code></li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>在python中， set是无序的，并且没有冗余元素的数据结构。A single set can contain values of any immutable datatype, 因此像list不能是set中的元素，因为list不是immutable的，但是tuple可以。</p><h3 id="Set的创建"><a href="#Set的创建" class="headerlink" title="Set的创建"></a>Set的创建</h3><ul><li><code>a_set = {1,2,3}</code> 可以用来创建一个set， 但是<code>{}</code>为一个空的dict； <code>set()</code>才是创建一个空set的方式。</li><li>同时也可以使用<code>set([1,2,3])</code>函数来将一个list转换为一个set，此操作不会对list做改变。</li></ul><h3 id="增加和删除set中的元素"><a href="#增加和删除set中的元素" class="headerlink" title="增加和删除set中的元素"></a>增加和删除set中的元素</h3><h4 id="增加set中的元素："><a href="#增加set中的元素：" class="headerlink" title="增加set中的元素："></a>增加set中的元素：</h4><ul><li><code>a_set.add({1,2,3})</code>, 同list中的<code>append()</code>一样， 会将传进去的datatype加到一个变量中去</li><li><code>a_set.update({1,2,3}，{1，2，3})</code>, 同list中的<code>extend()</code>一样， 会将set或者list中的每一个元素加到set中，并且会去除重复元素，保证unique。</li></ul><h4 id="删除set中的元素："><a href="#删除set中的元素：" class="headerlink" title="删除set中的元素："></a>删除set中的元素：</h4><ul><li><code>a_set.discard(1)</code> 将会删除set中的变量1，如果变量1不存在，没有任何影响；</li><li><code>a_set.remove(1)</code>将会删除set中的变量1，如果变量1不存在，则会raise Exception KeyError。</li><li><code>a_set.pop()</code> 将会随机删除set中的一个元素，因为set是无序的，因此不能像list一样pop掉最后的元素。</li><li><code>a_set.clear()</code> 将会clear掉set的全部元素，返回一个空的set</li></ul><h3 id="Set的操作"><a href="#Set的操作" class="headerlink" title="Set的操作"></a>Set的操作</h3><ul><li><code>1 in a_set</code> will return True if a_set contains 1, otherwise return False</li><li><code>a_set.union(b_set)</code> 将会把 a_set和b_set取并集</li><li><code>a_set.intersection(b_set)</code> 将会取a_set 和 b_set 的交集</li><li><code>a_set.difference(b_set)</code> 将会取在a_set 但是不在b_set中的元素</li><li><code>a_set.symmetric_difference(b_set)</code> 将会取只出现在a_set 和 只出现在b_set的并集</li></ul><h3 id="Set-in-a-boolean-context"><a href="#Set-in-a-boolean-context" class="headerlink" title="Set in a boolean context"></a>Set in a boolean context</h3><ul><li>同list 和tuple 一样，空的set在boolean context中为False，否则为True</li></ul><h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><p>在python中，Dictionary为无序的key-value pair的set。当向dict中添加一个key的时候，你也必须添加一个相应的值。</p><h3 id="Dict的创建和元素获取"><a href="#Dict的创建和元素获取" class="headerlink" title="Dict的创建和元素获取"></a>Dict的创建和元素获取</h3><ul><li><code>{}</code> 为空的dict， <code>a_dict = {&#39;1&#39;: &#39;h&#39;, &#39;2&#39;: &#39;w&#39;}</code> 创建一个dict</li><li><code>a_dict[&#39;1&#39;]</code> 根据相应的key，来获取对应的value； 当<code>a_dict[&#39;3&#39;]</code> 获取一个未包含的key的时候，会raise KeyError Exception</li></ul><h3 id="Dict的更改"><a href="#Dict的更改" class="headerlink" title="Dict的更改"></a>Dict的更改</h3><ul><li><code>a_dict[&#39;3&#39;] = &#39;hhh&#39;</code>来增加新的key-value pair</li><li><code>a_dict[&#39;1&#39;] = &#39;hh&#39;</code> 来对已经存在的key-value pair进行更改</li></ul><h3 id="Mixed-Value-Dict"><a href="#Mixed-Value-Dict" class="headerlink" title="Mixed Value Dict"></a>Mixed Value Dict</h3><p>Dict 的value可以是任何类型， 但是dict的key 需要时immutable的， 例如： integer， string， tuple等。</p><ul><li>和list、set、tuple等一样, dict可以用<code>len()</code>来返回key-value pair的个数</li><li>和list、set、tuple等一样， 可以使用<code>in</code> 来判断一个变量是不是dict中的一个key</li></ul><h3 id="Dict-in-a-boolean-context"><a href="#Dict-in-a-boolean-context" class="headerlink" title="Dict in a boolean context"></a>Dict in a boolean context</h3><ul><li>An empty dict is False</li><li>Otherwise, it’s True</li></ul><h2 id="None"><a href="#None" class="headerlink" title="None"></a>None</h2><ul><li>None 是Python中一个比较特殊的constants，它是一个null值。</li><li>None有他自己特殊的type，为NoneType</li><li>将None同其他不是None的值进行比较，都将返回False。</li><li>所有的None值 (值为None的变量) 都相等。</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[Dive into Python 3] (<a href="http://www.diveintopython3.net/" target="_blank" rel="external">http://www.diveintopython3.net/</a>)</li></ul><hr>]]></content>
    
    <summary type="html">
    
      Dive Into Python3 Notes - Native Datatypes
    
    </summary>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/python/"/>
    
      <category term="notes" scheme="http://frankchu0229.github.io/categories/python/notes/"/>
    
    
      <category term="Python" scheme="http://frankchu0229.github.io/tags/Python/"/>
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>Dive Into Python3 Notes Your First Program</title>
    <link href="http://frankchu0229.github.io/2017/10/15/Dive%20Into%20Python%20Notes/"/>
    <id>http://frankchu0229.github.io/2017/10/15/Dive Into Python Notes/</id>
    <published>2017-10-15T08:15:23.000Z</published>
    <updated>2017-11-02T03:16:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dive-Into-Python3-Notes-Your-First-Program"><a href="#Dive-Into-Python3-Notes-Your-First-Program" class="headerlink" title="Dive Into Python3 Notes - Your First Program"></a>Dive Into Python3 Notes - Your First Program</h1><h2 id="Define-Functions"><a href="#Define-Functions" class="headerlink" title="Define Functions"></a>Define Functions</h2><ul><li>python function中没有定义返回类型。 每一个python functiuon都会有一个返回值，如果function中含有return value， 则返回相应的值；否则返回<code>None</code>(Python中的null)</li><li>在python中， 变量(anything)从不显示声明类型，python 内部会自动track相应的类型，内部根据该变量第一次被赋予的类型来决定该变量的类型。</li><li>python function允许参数有默认值，如果该参数没有被输入，则使用该参数的默认值；另外，function参数的指定，可以不按照在function中定义的顺序，只要提供该function中的变量名字即可。</li></ul><h2 id="Writing-Readable-Code"><a href="#Writing-Readable-Code" class="headerlink" title="Writing Readable Code"></a>Writing Readable Code</h2><h3 id="Documentation-Strings-doc-string-for-short"><a href="#Documentation-Strings-doc-string-for-short" class="headerlink" title="Documentation Strings (doc-string for short)"></a>Documentation Strings (doc-string for short)</h3><ul><li>“”” “”” triple quotes signify a multi-line doc-string. </li><li>Doc-string 必须在相应函数(类)中最前的地方被定义，在Python中， everything is object， doc-string 可以通过该object的.__doc_string得到。</li></ul><h2 id="Python-Import-Path"><a href="#Python-Import-Path" class="headerlink" title="Python Import Path"></a>Python Import Path</h2><ul><li>在Python中，当你想import其他python module的时候，python会首先去几个地方进行查找。 Specifically, python会在<code>sys.path</code>中的所有目录下进行查找。</li><li><code>sys.path</code> 是一个list， 你可以像操作正常的list一样将你的python module加入到<code>sys.path</code>中，例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">sys.path.insert(0, &quot;./tmp/hello_world.py&quot;)</div></pre></td></tr></table></figure><h2 id="Everything-Is-Object-In-Python"><a href="#Everything-Is-Object-In-Python" class="headerlink" title="Everything Is Object In Python"></a>Everything Is Object In Python</h2><ul><li>Python module is a object, so when you want to use the public functions, classes or attributes in the module, you need to add the module name before that, e.g., <code>FirstProgram.HelloWorld()</code></li><li>Python function is also a object, so you can use <code>FunctionName.__doc__</code> to get its doc-string.</li><li>In python, <code>classes</code>, <code>functions</code>, <code>modules</code> are first-class objects, which means you can pass them as a parameter in a function.</li></ul><h2 id="Python-Indenting-Code"><a href="#Python-Indenting-Code" class="headerlink" title="Python Indenting Code"></a>Python Indenting Code</h2><ul><li>在python中，函数没有显式的begin、end标志，也没有像java等语言用{}来标记函数的start和end。Python中用<code>冒号:</code>和<code>缩进</code>。</li><li>可以这样简单的理解，像在java中，涉及到code block的地方，需要有{}来标记，例如if， for， while， function等；在python中对于这些部分需要有<code>:</code>和缩进</li></ul><h2 id="Exceptions-In-Python"><a href="#Exceptions-In-Python" class="headerlink" title="Exceptions In Python"></a>Exceptions In Python</h2><ul><li>If you’re opening a file, it might not exist. If you’re importing a module, it might not be installed. If you’re connecting to a database, it might be unavailable, or you might not have the correct security credentials to access it. If you know a line of code may raise an exception, you should handle the exception using a <code>try...except</code> block, and <code>raise</code> to generate exceptions.</li><li>例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">try: </div><div class="line">import chardet</div><div class="line">except ImportError:</div><div class="line">chardet = None</div></pre></td></tr></table></figure><h2 id="In-Python-everything-is-case-sensitive"><a href="#In-Python-everything-is-case-sensitive" class="headerlink" title="In Python, everything is case-sensitive"></a>In Python, everything is case-sensitive</h2><h2 id="Running-Scripts"><a href="#Running-Scripts" class="headerlink" title="Running Scripts"></a>Running Scripts</h2><p>Python modules are objects and you can use some attributes of them:</p><ul><li>all modules have an attribute: <code>__name__</code>. 如果你是import a module， <code>__name__</code>即为该module的filename (不带路径名)；但如果你将该module单独的去run，此时<code>__name__</code>的值为它的default值：<code>__main__</code></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[Dive into Python 3] (<a href="http://www.diveintopython3.net/" target="_blank" rel="external">http://www.diveintopython3.net/</a>)</li></ul><hr>]]></content>
    
    <summary type="html">
    
      Dive Into Python3 Notes - Your First Program
    
    </summary>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/python/"/>
    
    
      <category term="Python" scheme="http://frankchu0229.github.io/tags/Python/"/>
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Summary</title>
    <link href="http://frankchu0229.github.io/2017/10/03/MySQLNotes/"/>
    <id>http://frankchu0229.github.io/2017/10/03/MySQLNotes/</id>
    <published>2017-10-03T13:24:57.000Z</published>
    <updated>2018-02-05T13:32:11.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>Mysql 是最流行的关系型数据库管理系统，由瑞典MySQL公司开发，目前属于Oracle。MySQL使用标准的SQL数据语言形式。</p><h2 id="Concept-In-MySQL"><a href="#Concept-In-MySQL" class="headerlink" title="Concept In MySQL"></a>Concept In MySQL</h2><ul><li>主键： 主键是唯一的，一个数据表只能有一个主键， 可以用主键来查询数据。</li><li>外键：用于关联两个数据表。</li><li>复合键(组合键)：将多个列作为一个索引键，一般用于复合索引。 </li></ul><h2 id="MySQL-Install-and-Setup"><a href="#MySQL-Install-and-Setup" class="headerlink" title="MySQL Install and Setup"></a>MySQL Install and Setup</h2><ul><li><code>service mysqld start</code> 启动mysql</li><li><code>mysql -h localhost -u root -p</code> 进入mysql client端进行执行简单的SQL命令</li><li><code>quit</code> OR <code>Ctrl + D</code> 退出mysql。</li><li><code>mysqladmin -u root password &quot;new_password&quot;;</code> to set new password.</li><li><code>SHOW DATABASES;</code> to list all databases</li></ul><h2 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h2><p>MySQL中主要有三种数据类型：熟悉、日期|时间、字符串，MySQL支持所有标准SQL数值数据类型 <a href="http://www.cnblogs.com/zbseoag/archive/2013/03/19/2970004.html" target="_blank" rel="external">See more info.</a>。</p><h2 id="MySQL-数据库操作命令"><a href="#MySQL-数据库操作命令" class="headerlink" title="MySQL 数据库操作命令"></a>MySQL 数据库操作命令</h2><ul><li><code>SHOW DATABASES;</code> To list all databases</li><li><code>use XXX;</code> To choose the XXX database</li><li><code>SHOW TABLES;</code> 列出该数据库中所有表</li><li><code>SHOW COLUMNS FROM XX</code> OR <code>DESCRIBE XX;</code> 显示数据表的属性信息</li><li><code>SHOW INDEX FROM XX</code> 显示数据表的详细索引信息</li><li><code>SHOW TABLE STATUS FROM XXX</code> 显示数据库管理系统的性能及统计信息</li><li><code>SHOW TABLE STATUS FROM XXX LIKE &#39;runoob%&#39;</code> 显示以runoob开头的表的信息</li><li><code>SHOW TABLE STATUS FROM XXX LIKE &#39;runoob%&#39;\G</code> 显示以runoob开头的表的信息, 结果按照列打印</li><li><code>select version(),current_date();</code> 显示版本和日期， 可见mysql对大小写结果一致。也可多行语句， 直到见到”;”为止。</li></ul><h2 id="MySQL-常用操作命令"><a href="#MySQL-常用操作命令" class="headerlink" title="MySQL 常用操作命令"></a>MySQL 常用操作命令</h2><ul><li><code>create database XXX;</code> 创建数据库XXX</li><li><code>deop database XXX;</code> 删除数据库XXX</li><li><code>use XXX;</code> 选择数据库XXX</li><li><code>CREATE TABLE table_name(column_name column_type);</code> 创建数据表</li></ul><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; create table test_table( id INT NOT NULL AUTO_INCREMENT, name VARCHAR(20) NOT NULL, sex CHAR(1) NOT NULL, birth DATE, birth_addr VARCHAR(20), PRIMARY KEY (id));</div></pre></td></tr></table></figure></p><ul><li><code>drop table XXX;</code> 删除数据表；</li><li><code>insert into table_name (filed1, ...fieldn 可省略) values (value1, value2, ...valuen)</code> 插入数据；</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert into test_table values (1, &apos;john&apos;, &apos;m&apos;, &apos;1992-01-29&apos;, &apos;shanghai&apos;);</div></pre></td></tr></table></figure><ul><li><code>select * from table_name;</code>显示该表下的全部数据；</li></ul><p>MySQL 查询数据语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT column_name,column_name</div><div class="line">FROM table_name1, table_name2</div><div class="line">[WHERE Clause]</div><div class="line">[OFFSET M ][LIMIT N]</div></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select name,sex from test_table where id &gt; 1 limit 1;</div></pre></td></tr></table></figure><ul><li><code>update table_name set field1=new-value1, field2=new-value2</code> 更新数据</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update test_table set name=&apos;mike&apos; where id=1;</div></pre></td></tr></table></figure><ul><li><p><code>delete from table_name [where clause];</code>  删除表中数据，若没有指定条件，则删除整个表。</p></li><li><p><code>WHERE FIELD LIKE &#39;%XXX&#39;;</code> Like子句 + %，起到查询包含XXX的数据的左右， 例如： <code>select name from test_table where birth like &#39;1992%&#39;;</code></p></li><li><code>WHERE NAME REGEXP &#39;regex expression&#39;</code>, 例如： <code>SELECT name FROM person_tbl WHERE name REGEXP &#39;^[aeiou]|ok$&#39;;</code></li></ul><h3 id="ALTER-使用"><a href="#ALTER-使用" class="headerlink" title="ALTER 使用"></a>ALTER 使用</h3><ul><li><code>ALTER TABLE testalter_tbl  DROP i;</code> 删除一列</li><li><code>ALTER TABLE testalter_tbl ADD i INT;</code> 增加一列</li><li><code>ALTER TABLE testalter_tbl ADD i INT FIRST;</code> 在指定位置增加一列</li><li><code>ALTER TABLE testalter_tbl ADD i INT AFTER c;</code> 在指定位置增加一列</li><li><code>ALTER TABLE testalter_tbl MODIFY c CHAR(10);</code> 修改字段类型</li><li><code>ALTER TABLE testalter_tbl CHANGE j j INT;</code> 修改字段名以及类型</li><li><code>ALTER TABLE testalter_tbl   -&gt; MODIFY j BIGINT NOT NULL DEFAULT 100;</code> 设置默认值和NOT NULL</li><li><code>ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;</code> 修改字段默认值</li><li><code>ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;</code> 删除字段默认值</li><li><code>ALTER TABLE testalter_tbl RENAME TO alter_tbl;</code> 更改表名</li></ul><h3 id="Use-mysql-on-mac"><a href="#Use-mysql-on-mac" class="headerlink" title="Use mysql on mac"></a>Use mysql on mac</h3><ul><li>install by homebrew: <code>brew install mysql</code></li><li>start up mysql by homebrew <code>brew services start mysql</code></li><li>Verify the installed MySQL instance : <code>mysql -V</code></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://blog.csdn.net/chinacodec/article/details/5797127/" target="_blank" rel="external">http://blog.csdn.net/chinacodec/article/details/5797127/</a></li><li><a href="http://www.runoob.com/mysql/mysql-create-database.html" target="_blank" rel="external">http://www.runoob.com/mysql/mysql-create-database.html</a></li><li><a href="http://www.runoob.com/java/java-mysql-connect.html" target="_blank" rel="external">http://www.runoob.com/java/java-mysql-connect.html</a></li><li><a href="https://gist.github.com/nrollr/3f57fc15ded7dddddcc4e82fe137b58e" target="_blank" rel="external">https://gist.github.com/nrollr/3f57fc15ded7dddddcc4e82fe137b58e</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      MySQL summary。
    
    </summary>
    
      <category term="summary" scheme="http://frankchu0229.github.io/categories/summary/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="MySQL" scheme="http://frankchu0229.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Tmux Summary</title>
    <link href="http://frankchu0229.github.io/2017/09/23/TmuxNotes/"/>
    <id>http://frankchu0229.github.io/2017/09/23/TmuxNotes/</id>
    <published>2017-09-23T13:33:01.000Z</published>
    <updated>2017-10-30T12:29:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tmux-Summary"><a href="#Tmux-Summary" class="headerlink" title="Tmux Summary"></a>Tmux Summary</h1><h2 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h2><p><code>Ctrl + B + [</code></p><hr>]]></content>
    
    <summary type="html">
    
      Tmux Summary。
    
    </summary>
    
      <category term="summary" scheme="http://frankchu0229.github.io/categories/summary/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="linux" scheme="http://frankchu0229.github.io/tags/linux/"/>
    
      <category term="tmux" scheme="http://frankchu0229.github.io/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell Summary</title>
    <link href="http://frankchu0229.github.io/2017/09/03/linuxShellSummary/"/>
    <id>http://frankchu0229.github.io/2017/09/03/linuxShellSummary/</id>
    <published>2017-09-03T13:33:01.000Z</published>
    <updated>2018-02-08T05:57:34.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linus-Shell-Summary"><a href="#Linus-Shell-Summary" class="headerlink" title="Linus Shell Summary"></a>Linus Shell Summary</h1><h2 id="查看端口使用情况："><a href="#查看端口使用情况：" class="headerlink" title="查看端口使用情况："></a>查看端口使用情况：</h2><p><code>sudo lsof -i:8888</code></p><p>若要停止使用这个端口的程序，使用kill +对应的pid即可</p><h2 id="Copy-Public-Key"><a href="#Copy-Public-Key" class="headerlink" title="Copy Public Key :"></a>Copy Public Key :</h2><p><code>ssh-agent</code> //启动 ssh-agent，大家可以自行搜索自己所使用OS启动 ssh-agent的方式。</p><p><code>ssh-add</code></p><p><code>ssh-add -l</code> // 检查自己的私钥是否被ssh-agent管理</p><p>执行以下命令，将本地public-key添加到的authorized_keys里面：</p><p><code>ssh-copy-id -i ~/.ssh/id_rsa.pub User@HostName</code></p><h1 id="查找gz文件中的log"><a href="#查找gz文件中的log" class="headerlink" title="查找gz文件中的log"></a>查找gz文件中的log</h1><p>zgrep zcat</p><ul><li><code>zgrep 60a3b7146b12 laindocker.log-20170506.gz &gt; ~/T1836-all</code></li></ul><h2 id="从服务器上-下载-上传-文件到本地"><a href="#从服务器上-下载-上传-文件到本地" class="headerlink" title="从服务器上 (下载|上传) 文件到本地"></a>从服务器上 (下载|上传) 文件到本地</h2><ul><li>下载： <code>scp xxx@gpu:/home/src /home/drc</code></li></ul><p>若是目录的话， 加 <code>-r</code></p><ul><li>上传： <code>scp -r /localpath xxx@gpu:remotePath</code></li></ul><h2 id="ubuntu-soft-link"><a href="#ubuntu-soft-link" class="headerlink" title="ubuntu soft link"></a>ubuntu soft link</h2><p>文件夹建立软链接（用绝对地址）</p><p>ln -s 源地址 目的地址</p><p>比如我把linux文件系统rootfs_dir软链接到/home/xxx/目录下</p><p>　　<code>ln -s /opt/linux/rootfs_dir  /home/xxx/rootfs_dir</code>　　</p><h2 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h2><p><code>cat /etc/issue</code>  </p><h2 id="WC-Notes"><a href="#WC-Notes" class="headerlink" title="WC Notes"></a><code>WC</code> Notes</h2><ul><li><code>wc -l test.txt</code> 查看文件行数</li><li><code>wc -w test.txt</code> 查看文件字数，一个字被定义为由空白、跳格或换行字符分隔的字符串。</li><li><code>wc -c test.txt</code> 统计字节数| <code>wc -m test.txt</code> 统计字符数</li><li><code>wc -L test.txt</code> 打印最长的一行的长度 </li></ul><h2 id="查看文件夹下所有文件夹所占空间大小"><a href="#查看文件夹下所有文件夹所占空间大小" class="headerlink" title="查看文件夹下所有文件夹所占空间大小"></a>查看文件夹下所有文件夹所占空间大小</h2><ul><li><code>sudo du -h --max-depth=1</code>s</li></ul><h2 id="Mac-查看端口占用并kill掉相关进程"><a href="#Mac-查看端口占用并kill掉相关进程" class="headerlink" title="Mac 查看端口占用并kill掉相关进程"></a>Mac 查看端口占用并kill掉相关进程</h2><ul><li><p>查看端口<br>终端输入：<code>lsof -i tcp:port</code> 将port换成被占用的端口(如：8086、9998)<br>将会出现占用端口的进程信息。</p></li><li><p>kill进程<br>找到进程的PID,使用kill命令：<code>kill PID</code>（进程的PID，如2044），杀死对应的进程</p></li></ul><hr><p>　　</p>]]></content>
    
    <summary type="html">
    
      Linux shell summary。
    
    </summary>
    
      <category term="summary" scheme="http://frankchu0229.github.io/categories/summary/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="linux" scheme="http://frankchu0229.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://frankchu0229.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Git Summary</title>
    <link href="http://frankchu0229.github.io/2017/09/03/gitSummary/"/>
    <id>http://frankchu0229.github.io/2017/09/03/gitSummary/</id>
    <published>2017-09-03T13:24:57.000Z</published>
    <updated>2017-10-30T12:27:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-summary"><a href="#Git-summary" class="headerlink" title="Git summary"></a>Git summary</h1><h2 id="git-reset-–hard"><a href="#git-reset-–hard" class="headerlink" title="git reset –hard"></a>git reset –hard</h2><p>未commit的chagne会随着branch的切换而移动，因此，当在某一个branch中<code>git reset --hard</code>的时候， changes就会消失。</p><h2 id="git-删除remote-branch"><a href="#git-删除remote-branch" class="headerlink" title="git 删除remote branch"></a>git 删除remote branch</h2><p><code>git push origin --delete branch_name</code></p><h2 id="git-rm-files-in-repo"><a href="#git-rm-files-in-repo" class="headerlink" title="git rm files in repo"></a>git rm files in repo</h2><p><code>git rm --cache files</code></p><h2 id="show-git-track-files"><a href="#show-git-track-files" class="headerlink" title="show git track files"></a>show git track files</h2><p><code>git ls-files</code> </p><h2 id="git-diff-one-file-in-two-different-commit-ids"><a href="#git-diff-one-file-in-two-different-commit-ids" class="headerlink" title="git diff one file in two different commit ids:"></a>git diff one file in two different commit ids:</h2><p><code>git diff HEAD(^^)(two commits before current) commit_id XX.java</code><br><code>git diff HEAD^^ HEAD main.c</code></p><h2 id="Git-RSA-key-fingerprint"><a href="#Git-RSA-key-fingerprint" class="headerlink" title="Git RSA key fingerprint"></a>Git RSA key fingerprint</h2><p>The newer SSH commands will list fingerprints as a SHA256 Key.</p><p>For example</p><p><code>ssh-keygen -lf ~/.ssh/id_rsa.pub</code><br><code>1024 SHA256:19n6fkdz0qqmowiBy6XEaA87EuG/jgWUr44ZSBhJl6Y (DSA)</code></p><p>If you need to compare it against a old fingerprint you also need to specify to use the md5 fingerprint hashing function.</p><p><code>ssh-keygen -E md5 -lf ~/.ssh/id_rsa.pub</code><br><code>2048 MD5:4d:5b:97:19:8c:fe:06:f0:29:e7:f5:96:77:cb:3c:71 (DSA)</code></p><h2 id="Git-submodule"><a href="#Git-submodule" class="headerlink" title="Git submodule:"></a>Git submodule:</h2><h3 id="Git-submodule-delete"><a href="#Git-submodule-delete" class="headerlink" title="Git submodule delete:"></a>Git submodule delete:</h3><ol><li>Delete the relevant section from the .gitmodules file.</li><li>Stage the .gitmodules changes git add .gitmodules</li><li>Delete the relevant section from .git/config.</li><li>Run git rm –cached path_to_submodule (no trailing slash).</li><li>Run rm -rf .git/modules/path_to_submodule</li><li>Commit git commit -m “Removed submodule <name>“</name></li><li>Delete the now untracked submodule files</li><li>rm -rf path_to_submodule</li></ol><hr>]]></content>
    
    <summary type="html">
    
      Git summary。
    
    </summary>
    
      <category term="summary" scheme="http://frankchu0229.github.io/categories/summary/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="linux" scheme="http://frankchu0229.github.io/tags/linux/"/>
    
      <category term="git" scheme="http://frankchu0229.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 命令行快捷键</title>
    <link href="http://frankchu0229.github.io/2016/12/21/linuxCmdNotes/"/>
    <id>http://frankchu0229.github.io/2016/12/21/linuxCmdNotes/</id>
    <published>2016-12-21T09:00:02.000Z</published>
    <updated>2017-10-30T12:27:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><ul><li><code>Ctrl + a</code> 光标移动到行首</li><li><code>Ctrl + e</code> 光标移动到行尾</li><li><code>Ctrl + l</code> 清屏</li><li><code>Ctrl + Shift + c</code> 复制</li><li><code>Ctrl + Shift + v</code> 粘贴</li><li><code>Ctrl + r</code> 逆向搜索命令历史</li><li><code>Ctrl + c</code> 终止命令</li><li><code>Ctrl + z</code> 挂起命令</li><li><code>Ctrl + u</code> 删除光标左边所有元素</li><li><code>Ctrl + k</code> 删除光标右边所有元素</li></ul><hr>]]></content>
    
    <summary type="html">
    
      熟悉ubuntu命令行快捷键，可以很好的提高在ubuntu下开发的效率。
    
    </summary>
    
      <category term="ubuntu notes" scheme="http://frankchu0229.github.io/categories/ubuntu-notes/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="ubuntu" scheme="http://frankchu0229.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Vim Notes</title>
    <link href="http://frankchu0229.github.io/2016/11/21/vim2/"/>
    <id>http://frankchu0229.github.io/2016/11/21/vim2/</id>
    <published>2016-11-21T09:00:02.000Z</published>
    <updated>2017-10-30T12:29:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多行编辑"><a href="#多行编辑" class="headerlink" title="多行编辑"></a>多行编辑</h1><p>用<code>vim</code>进行多行编辑是十分方便的，只需要以下步骤：</p><ol><li><code>Ctrl-v</code> 进入纵向编辑模式 </li><li>通过<code>Shift-g</code>, <code>gg</code>, <code>j</code>,<code>k</code>等选择要编辑的行</li><li>若要删除多行，则<code>d</code>即可; 若要编辑多行的内容，<code>Shift-i</code>进入INSERT模式</li><li>进行编辑，然后按两次<code>ESC</code>就会发现多行编辑完成。</li></ol><h1 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h1><p>在使用<code>vim</code>编辑器的时候，结合<code>vim</code>的分屏功能，可以使得编辑更加高效：</p><h2 id="进入分屏的几种方式："><a href="#进入分屏的几种方式：" class="headerlink" title="进入分屏的几种方式："></a>进入分屏的几种方式：</h2><ol><li><code>vim -On file1 file2</code> 将<code>file1</code>和<code>file2</code>进行垂直分屏</li><li><code>vim -on file1 file2</code> 将<code>file1</code> 和<code>file2</code>进行水平分屏</li><li><code>vim file</code> 然后通过：<ul><li><code>Ctrl-w s</code>对当前文件进行水平(上下)分屏</li><li><code>Ctrl-w v</code>对当前文件进行垂直(左右)分屏</li><li><code>:sp newFile</code> 打开新的文件，上下分割 </li><li><code>:vsp newFile</code> 打开新的文件，左右分割</li></ul></li></ol><h2 id="分屏的切换："><a href="#分屏的切换：" class="headerlink" title="分屏的切换："></a>分屏的切换：</h2><ol><li><code>Ctrl-w j</code> 切换到下边的分屏上</li><li><code>Ctrl-w k</code> 切换到上边的分屏上</li><li><code>Ctrl-w h</code> 切换到左边的分屏上</li><li><code>Ctrl-w l</code> 切换到右边的分屏上</li></ol><h2 id="分屏的关闭："><a href="#分屏的关闭：" class="headerlink" title="分屏的关闭："></a>分屏的关闭：</h2><ol><li><code>Ctrl-w c</code> 关闭当前分屏</li><li><code>Ctrl-w q</code> 关闭当前分屏，若为最后一个分屏，则退出<code>vim</code>.</li></ol><p>用分屏是很方便的，当用<code>:sp newFile</code>打开一个新的文件时，可通过<code>y</code>, <code>p</code>的方式进行复制、粘贴，大大提高效率。</p><h2 id="vim-delete-part-of-lines"><a href="#vim-delete-part-of-lines" class="headerlink" title="vim delete part of lines"></a>vim delete part of lines</h2><p><code>:%s/&quot;: {//</code></p><h2 id="delete-the-whole-line-satisfied-with-the-pattern"><a href="#delete-the-whole-line-satisfied-with-the-pattern" class="headerlink" title="delete the whole line satisfied with the pattern:"></a>delete the whole line satisfied with the pattern:</h2><p><code>:g/^9 /d</code></p><hr>]]></content>
    
    <summary type="html">
    
      vim 进阶
    
    </summary>
    
      <category term="vim notes" scheme="http://frankchu0229.github.io/categories/vim-notes/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="vim" scheme="http://frankchu0229.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Vim Notes</title>
    <link href="http://frankchu0229.github.io/2016/10/21/vimNotes/"/>
    <id>http://frankchu0229.github.io/2016/10/21/vimNotes/</id>
    <published>2016-10-21T09:00:02.000Z</published>
    <updated>2017-10-30T12:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lesson-1-SUMMARY"><a href="#Lesson-1-SUMMARY" class="headerlink" title="Lesson 1 SUMMARY:"></a>Lesson 1 SUMMARY:</h2><ol><li><p>The cursor is moved using either the arrow keys or the hjkl keys: </p><p>h(left) , j (down) , k (up) , l (right)</p></li><li><p>To start Vim from the shell prompt type:  <code>vim FILENAME &lt;ENTER&gt;</code></p></li><li><p>To exit Vim type:     <code>&lt;ESC&gt;   :q!     &lt;ENTER&gt;</code> to trash all changes.</p><p>OR type: <code>&lt;ESC&gt;  :wq     &lt;ENTER&gt;</code> to save the changes.</p></li><li><p>To delete the character at the cursor type:  <code>x</code></p></li><li><p>To insert or append text type:</p><p> <code>i</code>   type inserted text   <code>&lt;ESC&gt;</code>   insert before the cursor</p><p> <code>A</code>   type appended text   <code>&lt;ESC&gt;</code>    append after the line</p></li></ol><p><strong>NOTE:</strong> Pressing <esc> will place you in Normal mode or will cancel an unwanted and partially completed command.</esc></p><h2 id="Lesson-2-SUMMARY"><a href="#Lesson-2-SUMMARY" class="headerlink" title="Lesson 2 SUMMARY:"></a>Lesson 2 SUMMARY:</h2><ol><li><p>To delete from the cursor up to the next word type: <code>dw</code></p></li><li><p>To delete from the cursor to the end of a line type: <code>d$</code></p></li><li><p>To delete a whole line type:  <code>dd</code></p></li><li><p>To repeat a motion prepend it with a number: <code>2w</code></p></li><li><p>The format for a change command is: <code>operator   [number]   motion</code>, where: </p><p>1). operator: is what to do, such as  <code>d</code>  for delete</p><p>2). [number]: is an optional count to repeat the motion</p><p>3). motion : moves over the text to operate on, such as  <code>w</code> (word), $ (to the end of line), etc.</p></li><li><p>To move to the start of the line use a zero:  <code>0</code></p></li><li><p>To undo previous actions, type: <code>u</code>  (lowercase u)</p><p>To undo all the changes on a line, type:  <code>U</code>  (capital U)</p><p>To undo the undo’s, type: <code>CTRL-R</code></p></li></ol><h2 id="Lesson-3-SUMMARY"><a href="#Lesson-3-SUMMARY" class="headerlink" title="Lesson 3 SUMMARY:"></a>Lesson 3 SUMMARY:</h2><ol><li><p>To put back text that has just been deleted, type <code>p</code> .  This puts the deleted text AFTER the cursor (if a line was deleted it will go on the line below the cursor).</p></li><li><p>To replace the character under the cursor, type <code>r</code> and then the character you want to have there.</p></li><li><p>The change operator allows you to change from the cursor to where the motion takes you.  e.g., type  ce  to change from the cursor to the end of the word,  <code>c$</code> to change to the end of a line.</p></li><li><p>The format for change is:  <code>c   [number]   motion</code></p></li></ol><h2 id="Lesson-4-SUMMARY"><a href="#Lesson-4-SUMMARY" class="headerlink" title="Lesson 4 SUMMARY:"></a>Lesson 4 SUMMARY:</h2><ol><li><p><code>CTRL-G</code>  displays your location in the file and the file status.</p><p><code>G</code>  moves to the end of the file.</p><p><code>number  G</code>  moves to that line number.</p><p><code>gg</code>  moves to the first line.</p></li><li><p>Typing  <code>/</code>    followed by a phrase searches FORWARD for the phrase.</p><p>Typing  <code>?</code>    followed by a phrase searches BACKWARD for the phrase.</p><p>After a search type  <code>n</code>  to find the next occurrence in the same direction or  <code>N</code>  to search in the opposite direction.</p><p><code>CTRL-O</code> takes you back to older positions, <code>CTRL-I</code> to newer positions.</p></li><li><p>Typing  <code>%</code>    while the cursor is on a ( , ),[ , ],{ , or } goes to its match.</p></li><li><p>To substitute new for the first old in a line type    <code>:s/old/new</code></p><p>To substitute new for all ‘old’s on a line type     <code>:s/old/new/g</code></p><p>To substitute phrases between two line #’s type     <code>:#,#s/old/new/g</code></p><p>To substitute all occurrences in the file type      <code>:%s/old/new/g</code></p><p>To ask for confirmation each time add ‘c’           <code>:%s/old/new/gc</code></p></li></ol><h2 id="Lesson-5-SUMMARY"><a href="#Lesson-5-SUMMARY" class="headerlink" title="Lesson 5 SUMMARY:"></a>Lesson 5 SUMMARY:</h2><p> <code>:!command</code>  executes an external command,  and some useful examples are:</p><table><thead><tr><th>MS-DOS</th><th style="text-align:center">Unix</th><th style="text-align:right">effect</th></tr></thead><tbody><tr><td><code>:!dir</code></td><td style="text-align:center"><code>:!ls</code></td><td style="text-align:right">shows a directory listing.</td></tr><tr><td><code>:!del FILENAME</code></td><td style="text-align:center"><code>:!rm FILENAME</code></td><td style="text-align:right">removes file FILENAME.</td></tr></tbody></table><ol><li><p><code>:w FILENAME</code>  writes the current Vim file to disk with name FILENAME.</p></li><li><p><code>v  motion  :w FILENAME</code>  saves the Visually selected lines in file FILENAME.</p></li><li><p><code>:r FILENAME</code>  retrieves disk file FILENAME and puts it below the cursor position.</p></li><li><p><code>:r !dir</code>  reads the output of the dir command and puts it below the cursor position.</p></li></ol><h2 id="Lesson-6-SUMMARY："><a href="#Lesson-6-SUMMARY：" class="headerlink" title="Lesson 6 SUMMARY："></a>Lesson 6 SUMMARY：</h2><ol><li><p>Type  <code>o</code>  to open a line BELOW the cursor and start Insert mode.</p><p>Type  <code>O</code>  to open a line ABOVE the cursor.</p></li><li><p>Type  <code>a</code>  to insert text AFTER the cursor.</p><p>Type  <code>A</code>  to insert text after the end of the line.</p></li><li><p>The  <code>e</code>  command moves to the end of a word.</p></li><li><p>The  <code>y</code>  operator yanks (copies) text,  <code>p</code>  puts (pastes) it.</p></li><li><p>Typing a capital <code>R</code>  enters Replace mode until  <code>&lt;ESC&gt;</code>  is pressed.</p></li><li><p>Typing “:set xxx” sets the option “xxx”.  Some options are:</p><p>1) ‘ic’ ‘ignorecase’    ignore upper/lower case when searching</p><p>2) ‘is’ ‘incsearch’    show partial matches for a search phrase</p><p>3) ‘hls’ ‘hlsearch’    highlight all matching phrases</p><p>4) You can either use the long or the short option name.</p></li></ol><ol><li>Prepend “no” to switch an option off:   <code>:set noic</code></li></ol><h2 id="Lesson-7-SUMMARY："><a href="#Lesson-7-SUMMARY：" class="headerlink" title="Lesson 7 SUMMARY："></a>Lesson 7 SUMMARY：</h2><ol><li><p>Type  <code>:help</code>  or press <code>&lt;F1&gt;</code> or <code>&lt;Help&gt;</code>  to open a help window.</p></li><li><p>Type  <code>:help</code> cmd  to find help on  cmd .</p></li><li><p>Type  <code>CTRL-W CTRL-W</code>  to jump to another window</p></li><li><p>Type  <code>:q</code>  to close the help window</p></li><li><p>Create a <strong>vimrc</strong> startup script to keep your preferred settings.</p></li><li><p>When typing a  <code>:</code>  command, press <code>CTRL-D</code> to see possible completions. Press <code>&lt;TAB&gt;</code> to use one completion.</p></li></ol><hr>]]></content>
    
    <summary type="html">
    
      This is the summary from vimtutor, you can find all the basic vim usages here.
    
    </summary>
    
      <category term="vim notes" scheme="http://frankchu0229.github.io/categories/vim-notes/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="vim" scheme="http://frankchu0229.github.io/tags/vim/"/>
    
  </entry>
  
</feed>
