<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank Chu</title>
  <icon>https://www.gravatar.com/avatar/7c04e9129318ea2b45bdf06f71529116</icon>
  <subtitle>The world need dreamers who do.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://frankchu0229.github.io/"/>
  <updated>2018-06-04T13:18:15.956Z</updated>
  <id>http://frankchu0229.github.io/</id>
  
  <author>
    <name>Frank Chu</name>
    <email>chushb@shanghaitech.edu.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker Summary</title>
    <link href="http://frankchu0229.github.io/2018/06/04/docker-summary/"/>
    <id>http://frankchu0229.github.io/2018/06/04/docker-summary/</id>
    <published>2018-06-04T12:47:02.000Z</published>
    <updated>2018-06-04T13:18:15.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-build-image-and-push-to-remote-registry"><a href="#Docker-build-image-and-push-to-remote-registry" class="headerlink" title="Docker build image and push to remote registry"></a>Docker build image and push to remote registry</h2><ul><li>To add <code>Dockerfile</code></li><li>run <code>docker build -t image_name .</code> to build image</li><li>run <code>docker image ls</code> to list all images</li><li>run <code>docker login docker.XXX.com</code> to login the docker registry</li><li>run <code>docker tag image_name username/repository:tag</code> to tag the image</li><li>run <code>docker push username/repository:tag</code> to push the image to the remote repository.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.docker.com/get-started/part2/#log-in-with-your-docker-id" target="_blank" rel="external">Docker Tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      Docker Usage Summary
    
    </summary>
    
      <category term="docker" scheme="http://frankchu0229.github.io/categories/docker/"/>
    
    
      <category term="tools" scheme="http://frankchu0229.github.io/tags/tools/"/>
    
      <category term="docker" scheme="http://frankchu0229.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Python Cookbook String and Text</title>
    <link href="http://frankchu0229.github.io/2018/06/04/python-cookbook-str-text/"/>
    <id>http://frankchu0229.github.io/2018/06/04/python-cookbook-str-text/</id>
    <published>2018-06-04T08:12:53.000Z</published>
    <updated>2018-06-04T08:15:42.967Z</updated>
    
    <summary type="html">
    
      Python Cookbook Notes String and Text.
    
    </summary>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/python/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="coding" scheme="http://frankchu0229.github.io/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Python Dependency Management</title>
    <link href="http://frankchu0229.github.io/2018/05/30/python-dependency-management/"/>
    <id>http://frankchu0229.github.io/2018/05/30/python-dependency-management/</id>
    <published>2018-05-30T12:40:37.000Z</published>
    <updated>2018-05-30T12:44:42.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li><code>pip install -r requirements.txt</code> to install all dependency in requirements.</li><li><code>pip freeze &gt; requirements.txt</code> to export all depenedncies to requirements.txt</li></ul><hr>]]></content>
    
    <summary type="html">
    
      Python Dependency Management.
    
    </summary>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="coding" scheme="http://frankchu0229.github.io/tags/coding/"/>
    
      <category term="dependency" scheme="http://frankchu0229.github.io/tags/dependency/"/>
    
  </entry>
  
  <entry>
    <title>Python Underline Usage</title>
    <link href="http://frankchu0229.github.io/2018/05/28/python-underline/"/>
    <id>http://frankchu0229.github.io/2018/05/28/python-underline/</id>
    <published>2018-05-28T04:48:07.000Z</published>
    <updated>2018-05-28T06:04:51.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用作变量名"><a href="#用作变量名" class="headerlink" title="用作变量名"></a>用作变量名</h2><p><code>_</code>有时会被用作变量名，表示是一个临时变量，后面不会被用到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">for _ in range(5):</div><div class="line">    print(&apos;hahaha&apos;)</div></pre></td></tr></table></figure><h2 id="放在变量名前"><a href="#放在变量名前" class="headerlink" title="放在变量名前"></a>放在变量名前</h2><h3 id="var-or-func"><a href="#var-or-func" class="headerlink" title="_var or_func"></a><code>_var</code> or<code>_func</code></h3><p>在变量名前加一个<code>_</code>表示这个变量名或者方法是私有的，不对外开放。</p><h3 id="var-or-func-1"><a href="#var-or-func-1" class="headerlink" title="__var or __func"></a><code>__var</code> or <code>__func</code></h3><p>在变量名前加<code>__</code>双下划线，表示该变量或者方法不可被覆盖. 实际上python内部通过在该变量名或者方法名前添加<code>_classname__methodName</code>的方式来防止覆盖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class A(object):</div><div class="line">    def __init__(self):</div><div class="line">        pass</div><div class="line">    def __method_show(self):</div><div class="line">        print(&quot;A&quot;)</div><div class="line"></div><div class="line">class B(A):</div><div class="line">    def __init__(self):</div><div class="line">        pass</div><div class="line">    def __method_show(self):</div><div class="line">        print(&quot;B&quot;)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    a = A()</div><div class="line">    print(dir(A))</div><div class="line">    print(dir(B))</div><div class="line">[&apos;_A__method_show&apos;, &apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;]</div><div class="line">[&apos;_A__method_show&apos;, &apos;_B__method_show&apos;, &apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;]</div></pre></td></tr></table></figure><h3 id="var"><a href="#var" class="headerlink" title="__var__"></a><code>__var__</code></h3><p>被用作python中的特殊方法名，保证不会和用户自定义的方法名冲突，如<code>__name__</code>, <code>__init__</code>等。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://python.jobbole.com/81129/" target="_blank" rel="external">reference</a></li><li><a href="http://www.cnblogs.com/coder2012/p/4423356.html" target="_blank" rel="external">refercnce</a></li></ul>]]></content>
    
    <summary type="html">
    
      Python 中下划线的使用总结。
    
    </summary>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="coding" scheme="http://frankchu0229.github.io/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Python中*的用法</title>
    <link href="http://frankchu0229.github.io/2018/05/28/python-star/"/>
    <id>http://frankchu0229.github.io/2018/05/28/python-star/</id>
    <published>2018-05-28T02:18:47.000Z</published>
    <updated>2018-05-29T18:06:28.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="args-与-kargs"><a href="#args-与-kargs" class="headerlink" title="*args 与 **kargs"></a>*args 与 **kargs</h2><p>*args 常作为变量用在func中，表示一组(list or tuple)变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def add(*args):</div><div class="line">    sum = 0</div><div class="line">    for num in args:</div><div class="line">        sum += num</div><div class="line">    return sum</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    print(add(1,2,3,4,5))</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def test(**kargs):</div><div class="line">    for key, value in kargs.items():</div><div class="line">        print(key,value)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    test(a=1, b=2)</div></pre></td></tr></table></figure><h2 id="在list或tuple赋值中使用"><a href="#在list或tuple赋值中使用" class="headerlink" title="在list或tuple赋值中使用*"></a>在list或tuple赋值中使用*</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iterData =  list(range(100))</div><div class="line">begin, *middle, end = iterData</div><div class="line">print(begin, middle, end)</div></pre></td></tr></table></figure><h2 id="在zip-中使用的"><a href="#在zip-中使用的" class="headerlink" title="在zip()中使用的*"></a>在zip()中使用的*</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def test_zip():</div><div class="line">    a = [1,2,3,4,5]</div><div class="line">    b = [6,7,8,9,10]</div><div class="line">    c = list(zip(a,b)) # 解压</div><div class="line">    print(c)</div><div class="line">    print(list(zip(*c))) # 压缩</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p02_unpack_elements_from_iterables.html" target="_blank" rel="external">python cookbook</a></li><li><a href="http://interactivepython.org/runestone/static/pythonds/index.html" target="_blank" rel="external">problems solving using algorithms and data structures</a></li></ul>]]></content>
    
    <summary type="html">
    
      Python 中*的用法。
    
    </summary>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="coding" scheme="http://frankchu0229.github.io/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Python Cookbook Notes Data Structure</title>
    <link href="http://frankchu0229.github.io/2018/05/27/python-cookbook-data-structure/"/>
    <id>http://frankchu0229.github.io/2018/05/27/python-cookbook-data-structure/</id>
    <published>2018-05-27T12:39:51.000Z</published>
    <updated>2018-06-04T08:15:41.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解压可迭代对象赋予多个值"><a href="#解压可迭代对象赋予多个值" class="headerlink" title="解压可迭代对象赋予多个值"></a>解压可迭代对象赋予多个值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = [1,2,3,4,5,6]</div><div class="line">x,*y,z = a</div></pre></td></tr></table></figure><p>You will get <code>x=1, y=[2,3,4,5], z=6</code>.</p><h2 id="保留最后n个元素"><a href="#保留最后n个元素" class="headerlink" title="保留最后n个元素"></a>保留最后n个元素</h2><p>可以使用<code>collections.deque</code>双向队列来实现, <code>deque(maxlen=N)</code> 可以定义一个长度为N的队列。</p><p><code>queue = deque(5)</code>,</p><ul><li><code>queue.append()</code> 从队尾append</li><li><code>queue.pop()</code> 从队尾pop</li><li><code>queue.appendleft()</code> 从队首插入</li><li><code>queue.popleft()</code> 从队首pop</li></ul><h2 id="查找最大或者最小的N个元素"><a href="#查找最大或者最小的N个元素" class="headerlink" title="查找最大或者最小的N个元素"></a>查找最大或者最小的N个元素</h2><p>可以使用python中的堆, <code>import heapq</code>, heapq 中提供了<code>nlarest</code> 和<code>nsmallest</code> 方法.</p><p>堆是一种特殊的数据结构，是一个完全二叉树。根据parent节点值不大于(小于)其左右子节点值，堆又可以分为最小堆和最大堆。python 中的heapq 提供了堆的数据结构实现，以及相关的堆算法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">heapq.nlargest(n, heap, key=None), key 为类似sorted中的key</div><div class="line">heapq.nsmallest(n, heap, key=None)</div><div class="line">heapq.heapify(list), to construct a heap given a list</div><div class="line">heapq.heappush(heap, item)</div><div class="line">heap.heappop(heap, item)</div></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>堆的插入和删除复杂度 O(logn), 查询O(n).</li><li>对长度为N的list，选出n个最小的元素，复杂度为O(Nlogn), 对N个元素进行遍历，维护一个大小为n的最小堆，每次插入复杂度为O(logn).</li></ul><h2 id="实现一个PriorityQueue"><a href="#实现一个PriorityQueue" class="headerlink" title="实现一个PriorityQueue"></a>实现一个PriorityQueue</h2><p>实现一个PriorityQueue， 并且在pop的时候，优先级最高的元素先出。可以考虑用heap，python中的heapq是一最小堆， 因此需要将priority取负数，同时添加index，使得当priority相同的时候可以通过index来进行比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import heapq</div><div class="line"></div><div class="line">class PriorityQueue:</div><div class="line">    def __init__(self):</div><div class="line">        self._queue = []</div><div class="line">        self._index = 0</div><div class="line">        </div><div class="line">    def push(self, item, priority):</div><div class="line">        heapq.heappush(self._queue, (-priority, self._index, item))</div><div class="line">        self._index += 1</div><div class="line">    </div><div class="line">    def pop(self):</div><div class="line">        return heapq.heappop(self._queue)[-1]</div><div class="line">        </div><div class="line">class Item:</div><div class="line">    def __init__(self, name):</div><div class="line">        self.name = name</div></pre></td></tr></table></figure><p>这里需要提到的是，如果直接比较<code>Item(&#39;a&#39;) &lt; Item(&#39;b&#39;)</code>, 是不支持的(需要override __gt__等方法)， 但是<code>(1, Item(&#39;a&#39;)) &lt; (2, Item(&#39;b&#39;)</code> 元组之间是可以进行比较的。</p><h2 id="DefaultDict-和-OrderedDict"><a href="#DefaultDict-和-OrderedDict" class="headerlink" title="DefaultDict 和 OrderedDict"></a>DefaultDict 和 OrderedDict</h2><ul><li><code>defaultdict</code> 可以为每一个key的值进行初始化，常用在一个key有多个值的情况，即该key对应了list()或者tuple.</li><li><code>OrderedDict</code> 在构建dict的时候，可以保存将pair put进dict中的顺序，类似于java中的<code>LinkedHashMap</code>. Python 中的OrderedDict维护了一个根据键值插入顺序的双向链表， 即每次该键值插入时，会在链表尾部添加该键值, 重复的键值不会影响链表机构。因此， OrderedDict 的内存开销是正常dict开销的两倍，在内存消耗较大的场景需要谨慎考虑是否使用OrderedDict.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from collections import OrderedDict</div><div class="line">from collections import defaultdict</div><div class="line">d = defaultdict(list)</div><div class="line">d[&apos;a&apos;].append(1)</div><div class="line">d[&apos;a&apos;].append(2)</div><div class="line">print(d[&apos;a&apos;])</div><div class="line"></div><div class="line">orderedDict = OrderedDict()</div><div class="line">orderedDict[&apos;a&apos;] = &apos;a&apos;</div><div class="line">orderedDict[&apos;b&apos;] = &apos;b&apos;</div><div class="line"></div><div class="line">print(orderedDict)</div></pre></td></tr></table></figure><h2 id="词典的运算"><a href="#词典的运算" class="headerlink" title="词典的运算"></a>词典的运算</h2><ul><li>在需要对词典的值进行排序，取最大最小值的同时，返回该值的键值，可以用下面的方法快速实现：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">data = dict()</div><div class="line">data[&apos;a&apos;] = 1</div><div class="line">data[&apos;b&apos;] = 2</div><div class="line">data[&apos;c&apos;] = 10</div><div class="line">print(data)</div><div class="line">print(min(zip(data.values(), data.keys()))) # zip()为只可迭代一次的迭代器</div><div class="line">print(max(zip(data.values(), data.keys())))</div><div class="line">print(sorted(zip(data.values(), data.keys())))</div></pre></td></tr></table></figure><ul><li>在需要查找两个词典的相同处和不同处的时候，可以使用：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = &#123;&apos;a&apos;:1, &apos;b&apos;:2, &apos;c&apos;:3&#125;</div><div class="line">b = &#123;&apos;a&apos;:1, &apos;d&apos;:5, &apos;z&apos;:6&#125;</div><div class="line">print(a.keys() &amp; b.keys())</div><div class="line">print(a.keys() - b.keys())</div><div class="line">print(a.items() &amp; b.items())</div><div class="line">print(a.items() - b.items())</div></pre></td></tr></table></figure><ul><li>dict的items()和keys() 返回一个集合，因此可以使用集合的操作来实现。但是dict的values()不能使用这个功能，主要是values()的值不能保证完全unique，可以先将values()转换成set，然后在操作.</li></ul><h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from collections import Counter</div><div class="line">a = [1,2,3,4,5,1,2,4,5,6,7]</div><div class="line">b = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</div><div class="line">counter = Counter(a)</div><div class="line">print(counter.most_common(3)) # get top 3 </div><div class="line">print(counter[1]) # 内部本质就是dict</div><div class="line">print(counter[2])</div><div class="line">a + b # Counter支持 集合操作</div><div class="line">a - b</div></pre></td></tr></table></figure><h2 id="itemgetter-amp-amp-attrgetter"><a href="#itemgetter-amp-amp-attrgetter" class="headerlink" title="itemgetter() &amp;&amp; attrgetter()"></a><code>itemgetter()</code> &amp;&amp; <code>attrgetter()</code></h2><p>在python中，<code>sorted(iterable, cmp=None, key=None, reverse=False)</code>、<code>min()</code>等函数常有key可以自定义一些行为。当然这里我们可以传入一个function对象，或者用一个lambda表达式来解决。但是其实我们可以使用<code>operator</code>中的<code>itemgetter()</code>和<code>attrgetter()</code>来提高效率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">rows = [</div><div class="line">    &#123;&apos;fname&apos;: &apos;Brian&apos;, &apos;lname&apos;: &apos;Jones&apos;, &apos;uid&apos;: 1003&#125;,</div><div class="line">    &#123;&apos;fname&apos;: &apos;David&apos;, &apos;lname&apos;: &apos;Beazley&apos;, &apos;uid&apos;: 1002&#125;,</div><div class="line">    &#123;&apos;fname&apos;: &apos;John&apos;, &apos;lname&apos;: &apos;Cleese&apos;, &apos;uid&apos;: 1001&#125;,</div><div class="line">    &#123;&apos;fname&apos;: &apos;Big&apos;, &apos;lname&apos;: &apos;Jones&apos;, &apos;uid&apos;: 1004&#125;</div><div class="line">]</div><div class="line">from operator import itemgetter</div><div class="line">a = sorted(rows, key=itemgetter(&apos;uid&apos;), reverse=True) # itemgetter() 常用在支持原生比较的对象</div><div class="line">a1 = sorted(rows, key=lambda r: r[&apos;uid&apos;])</div><div class="line">b = sorted(rows, key=itemgetter(&apos;fname&apos;))</div><div class="line">b1 = sorted(rows, key=lambda r: r[&apos;fname&apos;])</div><div class="line">print(a)</div><div class="line">print(a1)</div><div class="line">print(b)</div><div class="line">print(b1)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from operator import attrgetter</div><div class="line">class User:</div><div class="line">    def __init__(self, user_id):</div><div class="line">        self.user_id = user_id</div><div class="line">    </div><div class="line">    def __repr__(self):</div><div class="line">        return &quot;User(&#123;&#125;)&quot;.format(self.user_id)</div><div class="line"></div><div class="line">users = [User(1), User(5), User(3)] </div><div class="line"></div><div class="line">a = sorted(users, key=lambda u: u.user_id, reverse=True)</div><div class="line">b = sorted(users, key=attrgetter(&apos;user_id&apos;)) ## attrgetter() 常用在不支持原生比较的对象</div><div class="line">print(a)</div><div class="line">print(b)</div></pre></td></tr></table></figure><h2 id="itertools-groupby-通过某个字段进行分组"><a href="#itertools-groupby-通过某个字段进行分组" class="headerlink" title="itertools.groupby() 通过某个字段进行分组"></a><code>itertools.groupby()</code> 通过某个字段进行分组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">rows = [</div><div class="line">    &#123;&apos;address&apos;: &apos;5412 N CLARK&apos;, &apos;date&apos;: &apos;07/01/2012&apos;&#125;,</div><div class="line">    &#123;&apos;address&apos;: &apos;5148 N CLARK&apos;, &apos;date&apos;: &apos;07/04/2012&apos;&#125;,</div><div class="line">    &#123;&apos;address&apos;: &apos;5800 E 58TH&apos;, &apos;date&apos;: &apos;07/02/2012&apos;&#125;,</div><div class="line">    &#123;&apos;address&apos;: &apos;2122 N CLARK&apos;, &apos;date&apos;: &apos;07/03/2012&apos;&#125;,</div><div class="line">    &#123;&apos;address&apos;: &apos;5645 N RAVENSWOOD&apos;, &apos;date&apos;: &apos;07/02/2012&apos;&#125;,</div><div class="line">    &#123;&apos;address&apos;: &apos;1060 W ADDISON&apos;, &apos;date&apos;: &apos;07/02/2012&apos;&#125;,</div><div class="line">    &#123;&apos;address&apos;: &apos;4801 N BROADWAY&apos;, &apos;date&apos;: &apos;07/01/2012&apos;&#125;,</div><div class="line">    &#123;&apos;address&apos;: &apos;1039 W GRANVILLE&apos;, &apos;date&apos;: &apos;07/04/2012&apos;&#125;,</div><div class="line">]</div><div class="line"></div><div class="line">from itertools import groupby</div><div class="line">from operator import itemgetter</div><div class="line"></div><div class="line">sorted_rows = sorted(rows, key=itemgetter(&apos;date&apos;)) ## groupby() 只查找连续相同值，因此需要先根据该字段进行排序</div><div class="line"></div><div class="line">for date, items in groupby(sorted_rows, key=itemgetter(&apos;date&apos;)): ## groupby 返回group的字段值，并且在该字段值下的一个迭代器对象</div><div class="line">    print(date)</div><div class="line">    for i in items:</div><div class="line">        print(&apos;&apos;, i)</div></pre></td></tr></table></figure><h2 id="filter-过滤序列中的元素"><a href="#filter-过滤序列中的元素" class="headerlink" title="filter 过滤序列中的元素"></a><code>filter</code> 过滤序列中的元素</h2><p>在python中我们像过滤一个序列中的元素，常用到推到式，例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums = [n for n in range(10) if n &gt; 5]</div><div class="line">print(nums)</div><div class="line">nums = [n if n &gt; 5 else 0 for n in range(10) ]</div><div class="line">print(nums)</div></pre></td></tr></table></figure><p>但是在输入非常大的时候，由于推到式会将全部结果load进内存，导致内存消耗过大，这个时候我们可以使用生成器表达式来解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def print_nums(nums):</div><div class="line">    for n in nums: </div><div class="line">        print(n)</div><div class="line">        </div><div class="line">nums = (n for n in range(100) if n &gt; 3)</div><div class="line">print_nums(nums)</div><div class="line"></div><div class="line">nums = (n if n &gt; 3 else 0 for n in range(100))</div><div class="line">print_nums(nums)</div></pre></td></tr></table></figure><p>有时会出现过滤条件比较复杂的情况，不能在推到式或者生成器表达式中简单的表达出来，这个时候可以使用python built-in function <code>filter</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">values = [&apos;1&apos;, &apos;2&apos;, &apos;-3&apos;, &apos;-&apos;, &apos;4&apos;, &apos;N/A&apos;, &apos;5&apos;]</div><div class="line"></div><div class="line">def is_int(val):</div><div class="line">    try:</div><div class="line">        a = int(val)</div><div class="line">        return True</div><div class="line">    except:</div><div class="line">        return False</div><div class="line">    </div><div class="line">filtered = list(filter(is_int, values)) ## filter 返回一个迭代器</div><div class="line">print(filtered)</div></pre></td></tr></table></figure><h2 id="从字典中提取子集"><a href="#从字典中提取子集" class="headerlink" title="从字典中提取子集"></a>从字典中提取子集</h2><p>从字典中提取子集有以下若干种方式，经试验，字典推倒式更清晰，并且性能最好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">prices = &#123;</div><div class="line">    &apos;ACME&apos;: 45.23,</div><div class="line">    &apos;AAPL&apos;: 612.78,</div><div class="line">    &apos;IBM&apos;: 205.55,</div><div class="line">    &apos;HPQ&apos;: 37.20,</div><div class="line">    &apos;FB&apos;: 10.75</div><div class="line">&#125;</div><div class="line">tech_names = &#123;&apos;AAPL&apos;, &apos;IBM&apos;, &apos;HPQ&apos;, &apos;MSFT&apos;&#125;</div><div class="line"></div><div class="line">p1 = &#123;key:value for key, value in prices.items() if key in tech_names&#125; ## 字典推倒式，更清晰，性能更好</div><div class="line">print(p1)</div><div class="line"></div><div class="line">p2 = dict((key,value) for key,value in prices.items() if key in tech_names)</div><div class="line">print(p2)</div><div class="line"></div><div class="line">p3 = &#123;key:prices[key] for key in prices.keys() if key in tech_names&#125;</div><div class="line">print(p3)</div></pre></td></tr></table></figure><h2 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a><code>namedtuple</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">from collections import namedtuple</div><div class="line"></div><div class="line">Stock = namedtuple(&apos;Stock&apos;, [&apos;name&apos;, &apos;shares&apos;, &apos;price&apos;]) ## namedtuple 是标准元组(tuple)子类的一个工厂方法</div><div class="line">s = Stock(&apos;alibaba&apos;, 8080, 25)</div><div class="line">name, shares, price = s</div><div class="line">print(name)</div><div class="line">print(shares)</div><div class="line">print(price)</div><div class="line"></div><div class="line">def compute_cost(records):</div><div class="line">    total = 0.0</div><div class="line">    for rec in records:</div><div class="line">        total += rec.shares * rec.price</div><div class="line">    return total</div><div class="line"></div><div class="line">records = [Stock(&apos;alibaba&apos;, 8080, 25), Stock(&apos;tencent&apos;, 8888, 20)]</div><div class="line">print(compute_cost(records))</div></pre></td></tr></table></figure><h2 id="使用生成器表达式–转换并同时计算数据"><a href="#使用生成器表达式–转换并同时计算数据" class="headerlink" title="使用生成器表达式–转换并同时计算数据"></a>使用生成器表达式–转换并同时计算数据</h2><p>在很多时候，我们会用<code>any</code>, <code>sum</code>等函数，但是如果我们先计算得到一个临时list， 再通过<code>any</code>等函数计算，会多一个步骤。更优雅的方式是使用生成器表达式来转换并同时计算数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nums = [1, 2, 3, 4, 5]</div><div class="line">sum_value = sum(num*num for num in nums)</div><div class="line">print(sum_value)</div></pre></td></tr></table></figure><h2 id="ChainMap"><a href="#ChainMap" class="headerlink" title="ChainMap"></a><code>ChainMap</code></h2><p>现在假设你必须在两个字典中执行查找操作（比如先从 a 中找，如果找不到再在 b 中找）。 一个非常简单的解决方案就是使用 collections 模块中的 ChainMap 类。</p><p>一个 ChainMap 接受多个字典并将它们在逻辑上变为一个字典。 然后，这些字典并不是真的合并在一起了， ChainMap 类只是在内部创建了一个容纳这些字典的列表 并重新定义了一些常见的字典操作来遍历这个列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from collections import ChainMap</div><div class="line"></div><div class="line">a = &#123;&apos;x&apos;: 1, &apos;z&apos;: 3 &#125;</div><div class="line">b = &#123;&apos;y&apos;: 2, &apos;z&apos;: 4 &#125;</div><div class="line"></div><div class="line">chain_map = ChainMap(a, b)</div><div class="line">print(chain_map[&apos;x&apos;])</div><div class="line">print(chain_map[&apos;y&apos;])</div><div class="line">print(chain_map[&apos;z&apos;]) # 都有的话使用第一个dict中的元素，同理删除和更新也是更新第一个字典中的该字段的值</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p11_naming_slice.html" target="_blank" rel="external">Python Cookbook</a></li><li><a href="https://www.cnblogs.com/100thMountain/p/4719503.html" target="_blank" rel="external">reference for itemgetter()</a></li><li><a href="https://blog.csdn.net/qq_24861509/article/details/47690819" target="_blank" rel="external">reference for attrgetter()</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      Python Cookbook Notes Data Structure.
    
    </summary>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/python/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="coding" scheme="http://frankchu0229.github.io/tags/coding/"/>
    
      <category term="data structure" scheme="http://frankchu0229.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>Conda Summary</title>
    <link href="http://frankchu0229.github.io/2018/05/21/conda-notes/"/>
    <id>http://frankchu0229.github.io/2018/05/21/conda-notes/</id>
    <published>2018-05-21T12:59:20.000Z</published>
    <updated>2018-05-21T13:29:51.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Conda-Environment"><a href="#Conda-Environment" class="headerlink" title="Conda Environment"></a>Conda Environment</h2><ul><li>list all conda envs: <code>conda env list</code></li><li>create conda env: <code>conda create --name test python=3.4</code>, if not specify python version, conda will ues the same python version as the python version in conda.</li><li>conda activate env: <code>source activate env_name</code></li><li>conda deactivate env: <code>source deactivate env_name</code></li><li>create conda from file: <code>conda env create -f environment.yml</code></li><li>conda export environment config: <code>connda env export &gt; environment.yml</code></li><li>conda remove an environment: <code>conda remove --name env_name --all</code></li></ul><h2 id="Conda-Package"><a href="#Conda-Package" class="headerlink" title="Conda Package"></a>Conda Package</h2><ul><li>conda search package: <code>conda search tensorflow</code></li><li>conda install package in a specific env: <code>conda install --name env_name tensorflow</code></li><li>conda install package in the current env: <code>conda install tensorflow=1.4.0</code>, if not given package version, the latest version will be uesd.</li><li>conda list all packages in the current env: <code>conda list</code></li><li>conda update pacakge: <code>conda update tensorflow</code></li><li>conda remove package: <code>conda remove -n env_name tensorflow</code></li><li>if cannot find package by conda, you can use <code>pip install package_name</code>.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://conda.io/docs/user-guide/tasks/manage-environments.html#" target="_blank" rel="external">Conda Documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      Conda 使用总结.
    
    </summary>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="conda" scheme="http://frankchu0229.github.io/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook Summary</title>
    <link href="http://frankchu0229.github.io/2018/05/21/jupyter-notes/"/>
    <id>http://frankchu0229.github.io/2018/05/21/jupyter-notes/</id>
    <published>2018-05-21T12:47:37.000Z</published>
    <updated>2018-05-23T05:31:01.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jupyter-Install"><a href="#Jupyter-Install" class="headerlink" title="Jupyter Install"></a>Jupyter Install</h2><ul><li>use <code>conda install jupyter</code></li><li>use <code>pip install jupyter</code></li></ul><h2 id="Use-Jupyter-On-Gpu-Server"><a href="#Use-Jupyter-On-Gpu-Server" class="headerlink" title="Use Jupyter On Gpu Server"></a>Use Jupyter On Gpu Server</h2><ul><li>First, start jupyter-notebook on GPU</li><li>Then, use <code>ssh myserver -L 8888:localhost:8888</code> to link local port <code>8888</code> to gpu server port <code>8888</code></li></ul><h2 id="Use-Conda-Virtual-Environment-On-Jupyter"><a href="#Use-Conda-Virtual-Environment-On-Jupyter" class="headerlink" title="Use Conda Virtual Environment On Jupyter"></a>Use Conda Virtual Environment On Jupyter</h2><ul><li>install plugins on conda <code>conda install nb_conda</code></li></ul><h2 id="Jupyter-Shortcut-Keys"><a href="#Jupyter-Shortcut-Keys" class="headerlink" title="Jupyter Shortcut Keys:"></a>Jupyter Shortcut Keys:</h2><h3 id="Command-Mode"><a href="#Command-Mode" class="headerlink" title="Command Mode"></a>Command Mode</h3><ul><li>press <code>esc</code> to enter command mode</li><li><code>x</code> cut cell</li><li><code>c</code> copy cell</li><li><code>v</code> copy cell to the downside</li><li><code>Shift + v</code> copy cell to the upside</li><li><code>a</code> create cell to the downside</li><li><code>b</code> create cell to the upside</li><li><code>dd</code> delete cell</li><li><code>ctrl + s</code> save jupyter file</li><li><code>shift + m</code> merge cell</li><li><code>m</code> change cell to markdown</li><li><code>y</code> change cell to code</li></ul><h3 id="Edit-Mode"><a href="#Edit-Mode" class="headerlink" title="Edit Mode"></a>Edit Mode</h3><ul><li>press <code>enter</code> to enter edit mode</li><li><code>tab</code> auto-completition</li><li><code>shift + tab</code> show instructions</li><li><code>ctrl + enter</code> run current cell</li><li><code>shift + enter</code> run current cell and go to next cell</li><li><code>alt + enter</code> run current cell and insert a new cell below</li></ul><h2 id="Use-Jupyter-Extensions-e-g-vim"><a href="#Use-Jupyter-Extensions-e-g-vim" class="headerlink" title="Use Jupyter Extensions, e.g., vim"></a>Use Jupyter Extensions, e.g., vim</h2><ul><li>First install <code>IPython-notebook-extensions</code> by </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pip install https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master</div><div class="line">$ jupyter contrib nbextension install --user</div></pre></td></tr></table></figure><ul><li>Install Vim Extensions:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 在 ~/.local/share/jupyter/ 建立nbextensions資料夾</div><div class="line">$ mkdir -p $(jupyter --data-dir)/nbextensions</div><div class="line"># Clone the repo</div><div class="line">$ cd $(jupyter --data-dir)/nbextensions</div><div class="line">$ git clone https://github.com/lambdalisue/jupyter-vim-binding</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><p><a href="https://www.jianshu.com/p/afea092dda1d" target="_blank" rel="external">reference link</a></p></li><li><p><a href="http://cyruschiu.github.io/2016/09/05/jupyter-notebook-vim-binding/" target="_blank" rel="external">Vim Extensions</a></p></li><li><p><a href="https://blog.csdn.net/lawme/article/details/51034543" target="_blank" rel="external">Shortcut Reference</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      Jupyter notebook 使用总结.
    
    </summary>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/python/"/>
    
      <category term="tools" scheme="http://frankchu0229.github.io/categories/python/tools/"/>
    
      <category term="conda" scheme="http://frankchu0229.github.io/categories/python/tools/conda/"/>
    
      <category term="jupyter" scheme="http://frankchu0229.github.io/categories/python/tools/conda/jupyter/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="conda" scheme="http://frankchu0229.github.io/tags/conda/"/>
    
      <category term="jupyter" scheme="http://frankchu0229.github.io/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Learning To Rank</title>
    <link href="http://frankchu0229.github.io/2018/03/08/learning-to-rank/"/>
    <id>http://frankchu0229.github.io/2018/03/08/learning-to-rank/</id>
    <published>2018-03-08T09:24:36.000Z</published>
    <updated>2018-03-08T09:25:45.891Z</updated>
    
    <content type="html"><![CDATA[<hr>]]></content>
    
    <summary type="html">
    
      Summary learning to rank.
    
    </summary>
    
      <category term="maven" scheme="http://frankchu0229.github.io/categories/maven/"/>
    
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="ML" scheme="http://frankchu0229.github.io/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>Maven Summary</title>
    <link href="http://frankchu0229.github.io/2018/03/05/maven-notes/"/>
    <id>http://frankchu0229.github.io/2018/03/05/maven-notes/</id>
    <published>2018-03-05T04:00:45.000Z</published>
    <updated>2018-03-08T09:02:21.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Show-Super-Pom"><a href="#Show-Super-Pom" class="headerlink" title="Show Super Pom"></a>Show Super Pom</h2><ul><li><code>mvn help:effective-pom</code></li></ul><h2 id="Show-all-dependencies"><a href="#Show-all-dependencies" class="headerlink" title="Show all dependencies"></a>Show all dependencies</h2><ul><li><code>mvn dependency:tree</code></li></ul><h2 id="RM-dependnecy-in-pom"><a href="#RM-dependnecy-in-pom" class="headerlink" title="RM dependnecy in pom"></a>RM dependnecy in pom</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;exclusions&gt;</div><div class="line">  &lt;exclusion&gt;</div><div class="line">    &lt;groupId&gt;com.group&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;name&lt;/artifactId&gt;</div><div class="line">  &lt;/exclusion&gt;</div><div class="line">&lt;/exclusions&gt;</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://wiki.jikexueyuan.com/project/maven/pom.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/maven/pom.html</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      Summary for maven, a popular java package management tool.
    
    </summary>
    
      <category term="maven" scheme="http://frankchu0229.github.io/categories/maven/"/>
    
    
      <category term="java" scheme="http://frankchu0229.github.io/tags/java/"/>
    
      <category term="maven" scheme="http://frankchu0229.github.io/tags/maven/"/>
    
      <category term="package management" scheme="http://frankchu0229.github.io/tags/package-management/"/>
    
  </entry>
  
  <entry>
    <title>Ali Xiaomi Transfer Learning</title>
    <link href="http://frankchu0229.github.io/2018/03/04/transfer-learning-alimi/"/>
    <id>http://frankchu0229.github.io/2018/03/04/transfer-learning-alimi/</id>
    <published>2018-03-04T06:23:42.000Z</published>
    <updated>2018-03-05T04:02:54.230Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DrQA</title>
    <link href="http://frankchu0229.github.io/2018/03/04/drqa/"/>
    <id>http://frankchu0229.github.io/2018/03/04/drqa/</id>
    <published>2018-03-04T06:23:23.000Z</published>
    <updated>2018-03-05T04:02:25.686Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Design Pattern</title>
    <link href="http://frankchu0229.github.io/2018/02/27/design-pattern/"/>
    <id>http://frankchu0229.github.io/2018/02/27/design-pattern/</id>
    <published>2018-02-27T09:21:54.000Z</published>
    <updated>2018-03-08T09:00:10.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Singleton-Instance"><a href="#Singleton-Instance" class="headerlink" title="Singleton Instance"></a>Singleton Instance</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line"></div><div class="line">private static final class SingletonHolder &#123;</div><div class="line">private static final Test INSTANCE = new Test();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private Test() &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static Test getInstance() &#123;</div><div class="line">return SingletonHolder.INSTSNCE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">Test test = Test.getInstance();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Design pattern, examples implemented in java.
    
    </summary>
    
      <category term="Design Pattern" scheme="http://frankchu0229.github.io/categories/Design-Pattern/"/>
    
    
      <category term="engineering" scheme="http://frankchu0229.github.io/tags/engineering/"/>
    
      <category term="design pattern" scheme="http://frankchu0229.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java中的String, StringBuilder和 StringBuffer</title>
    <link href="http://frankchu0229.github.io/2018/02/26/java-notes/"/>
    <id>http://frankchu0229.github.io/2018/02/26/java-notes/</id>
    <published>2018-02-26T15:05:41.000Z</published>
    <updated>2018-05-21T12:54:16.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StringBuilder-与-StringBuffer"><a href="#StringBuilder-与-StringBuffer" class="headerlink" title="StringBuilder 与 StringBuffer"></a>StringBuilder 与 StringBuffer</h2><ul><li>StringBuilder 执行速度比StringBuffer要快，但是StringBuilder不是线程安全的</li><li>StringBuffer 是线程安全的，执行速度比StringBuilder要慢</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>在java中，String字符串常量是不可改变的对象，每当在String上进行操作时，实际上都是在创建一个新的String对象。以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. String s = &quot;abx&quot;;</div><div class="line">2. String s = s + &quot;ds&quot;;</div></pre></td></tr></table></figure><p>其中，第二行中的<code>s</code>会被重新创建，原来的对象会被GC掉。而StringBuilder和StringBuffer是可变对象，在同一个对象上进行操作。</p><p>值得注意的一点是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = &quot;this &quot; + &quot;is &quot; + &quot;my &quot; + &quot;home&quot;</div></pre></td></tr></table></figure><p>等同于<code>String s = &quot;This is my home&quot;</code>, 在这种情况下String操作要比StringBuilder和StringBuffer要快，是JVM的一个把戏。但是当字符串拼接中有其他的String变量时，JVM就会按照原来的方式来做。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://www.cnblogs.com/A_ming/archive/2010/04/13/1711395.html" target="_blank" rel="external">http://www.cnblogs.com/A_ming/archive/2010/04/13/1711395.html</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      Java 中的String, StringBuilder和 StringBuffer
    
    </summary>
    
      <category term="java" scheme="http://frankchu0229.github.io/categories/java/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="engineering" scheme="http://frankchu0229.github.io/tags/engineering/"/>
    
      <category term="java" scheme="http://frankchu0229.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Python Coding Style</title>
    <link href="http://frankchu0229.github.io/2018/02/11/python-coding-style/"/>
    <id>http://frankchu0229.github.io/2018/02/11/python-coding-style/</id>
    <published>2018-02-11T08:06:46.000Z</published>
    <updated>2018-02-11T08:25:02.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Name-Convention"><a href="#Name-Convention" class="headerlink" title="Name Convention"></a>Name Convention</h2><ul><li>module_name, </li><li>package_name, </li><li>ClassName, </li><li>method_name, </li><li>ExceptionName, </li><li>function_name, </li><li>GLOBAL_CONSTANT_NAME, </li><li>global_var_name, </li><li>instance_var_name, </li><li>function_parameter_name, </li><li>local_var_name</li><li>CLASS_CONSTANT_NAME</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://google.github.io/styleguide/pyguide.html" target="_blank" rel="external">Goole Python Coding Style</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      Python coding style summary.
    
    </summary>
    
      <category term="coding style" scheme="http://frankchu0229.github.io/categories/coding-style/"/>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/coding-style/python/"/>
    
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="coding style" scheme="http://frankchu0229.github.io/tags/coding-style/"/>
    
  </entry>
  
  <entry>
    <title>Cuda Notes</title>
    <link href="http://frankchu0229.github.io/2018/02/08/cuda-notes/"/>
    <id>http://frankchu0229.github.io/2018/02/08/cuda-notes/</id>
    <published>2018-02-08T07:32:14.000Z</published>
    <updated>2018-02-11T08:23:48.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nvidia-CUDA-9-1-Install"><a href="#Nvidia-CUDA-9-1-Install" class="headerlink" title="Nvidia CUDA 9.1 Install"></a>Nvidia CUDA 9.1 Install</h2><ul><li>download <strong>runfile</strong> from <a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1604&amp;target_type=runfilelocal" target="_blank" rel="external">here</a></li><li>install according to the <a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1604&amp;target_type=runfilelocal" target="_blank" rel="external">instructions</a></li><li>add the path, i.e. PATH and LD_LIBRARY_PATH, to your <code>~/.bashrc</code> like this:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=$PATH:/usr/local/cuda-9.1/bin/</div><div class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-9.1/lib64</div></pre></td></tr></table></figure><h2 id="NVCC-Usage"><a href="#NVCC-Usage" class="headerlink" title="NVCC Usage"></a>NVCC Usage</h2><ul><li>show version: <code>nvcc --version</code></li><li>show help: <code>nvcc --help</code></li></ul><h2 id="查看nvidia-gpu-使用情况"><a href="#查看nvidia-gpu-使用情况" class="headerlink" title="查看nvidia gpu 使用情况"></a>查看nvidia gpu 使用情况</h2><ul><li><code>nvidia-smi</code></li></ul><hr>]]></content>
    
    <summary type="html">
    
      CUDA Notes
    
    </summary>
    
      <category term="notes" scheme="http://frankchu0229.github.io/categories/notes/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="ubuntu" scheme="http://frankchu0229.github.io/tags/ubuntu/"/>
    
      <category term="cuda" scheme="http://frankchu0229.github.io/tags/cuda/"/>
    
      <category term="DL" scheme="http://frankchu0229.github.io/tags/DL/"/>
    
  </entry>
  
  <entry>
    <title>Mac Cassandra Notes</title>
    <link href="http://frankchu0229.github.io/2018/01/04/cassandra-note/"/>
    <id>http://frankchu0229.github.io/2018/01/04/cassandra-note/</id>
    <published>2018-01-04T12:57:32.000Z</published>
    <updated>2018-01-04T13:00:26.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac-cassandra-install"><a href="#Mac-cassandra-install" class="headerlink" title="Mac cassandra install"></a>Mac cassandra install</h2><p><a href="https://gist.github.com/hkhamm/a9a2b45dd749e5d3b3ae" target="_blank" rel="external">Install Instructions</a></p><h2 id="Mac-Cassandra-start-and-stop"><a href="#Mac-Cassandra-start-and-stop" class="headerlink" title="Mac Cassandra start and stop"></a>Mac Cassandra start and stop</h2><ul><li>start: <code>brew services start cassandra</code></li><li>stop: <code>brew services stop cassandra</code></li></ul><hr>]]></content>
    
    <summary type="html">
    
      Mac cassandra summary。
    
    </summary>
    
      <category term="notes" scheme="http://frankchu0229.github.io/categories/notes/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="cassandra" scheme="http://frankchu0229.github.io/tags/cassandra/"/>
    
      <category term="shell" scheme="http://frankchu0229.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL Summary</title>
    <link href="http://frankchu0229.github.io/2017/12/18/NoSQL/"/>
    <id>http://frankchu0229.github.io/2017/12/18/NoSQL/</id>
    <published>2017-12-18T07:25:39.000Z</published>
    <updated>2018-05-28T02:25:32.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoSQL-Summary"><a href="#NoSQL-Summary" class="headerlink" title="NoSQL Summary"></a>NoSQL Summary</h1><p>NoSQL指 not only SQL, 主要包括：</p><h3 id="Key-value-Redis-分布式：Codis"><a href="#Key-value-Redis-分布式：Codis" class="headerlink" title="Key-value: Redis, 分布式：Codis"></a><strong>Key-value: Redis, 分布式：Codis</strong></h3><p>以键值对的方式进行存储，其内部通常用哈希表的结构来对数据进行存储。在使用时，用户只需要根据key来访问即可。优点：对单条数据的增删改查非常迅速；缺点：数据库不知道对于数据本身的任何信息，往往需要对数据库中的数据进行遍历，<strong>不支持索引</strong>。<strong>Key-value型数据库通常在服务中作为缓存端使用</strong>，例如可作为MYSQL的缓存端使用，可使得服务性能提高10+倍。</p><h3 id="Document-based-mongoDB"><a href="#Document-based-mongoDB" class="headerlink" title="Document-based: mongoDB"></a><strong>Document-based: mongoDB</strong></h3><p>与Key-value数据库不同，Document-based 数据库中存储的不再是字符串，而是像JSON, XML等具有特定格式的文档。这些文档可以记录键值对，数组，或者是内嵌的文档。<strong>Document-based</strong>数据库常常支持索引，因此<strong>Document-based</strong>数据库既保留了key-value型数据库的便利，又在查询上借助索引可以达到不错的性能。</p><h3 id="Column-based-cassandra-Hbase"><a href="#Column-based-cassandra-Hbase" class="headerlink" title="Column-based: cassandra, Hbase"></a><strong>Column-based: cassandra, Hbase</strong></h3><p>按照列来在数据文件中记录数据，以便获得更好的遍历和请求效率，但并不是所有的数据都用列来存储，一般只有需要请求的数据会用列来存储。</p><h3 id="Graph-based-neo4j-janus-graph-dgraph"><a href="#Graph-based-neo4j-janus-graph-dgraph" class="headerlink" title="Graph-based: neo4j, janus graph, dgraph"></a><strong>Graph-based: neo4j, janus graph, dgraph</strong></h3><p>图数据库存储的时候是以图的形式保存的，对应底层数据结构是邻接表。</p><ul><li>图数据库查关系的时候速度很快；传统关系型数据库在查关系的时候需要join很多张表，速度比较慢。</li><li>传统关系型数据库存储的数据是结构化的，表的字段是固定的，数据规整，省空间，但是需要提前设计好表的结构，改动表结构代价比较大。图数据库的字段是不固定的，不用提前设计表的结构，改schema的代价很小。</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/loveis715/p/5299495.html" target="_blank" rel="external">https://www.cnblogs.com/loveis715/p/5299495.html</a></li><li><a href="https://www.cnblogs.com/aspwebchh/p/6652855.html" target="_blank" rel="external">https://www.cnblogs.com/aspwebchh/p/6652855.html</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      NoSQL Summary。
    
    </summary>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="NoSQL" scheme="http://frankchu0229.github.io/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Vimium Notes</title>
    <link href="http://frankchu0229.github.io/2017/12/04/vimium-notes/"/>
    <id>http://frankchu0229.github.io/2017/12/04/vimium-notes/</id>
    <published>2017-12-04T12:30:24.000Z</published>
    <updated>2017-12-04T12:46:35.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vimium-Introduction"><a href="#Vimium-Introduction" class="headerlink" title="Vimium Introduction"></a>Vimium Introduction</h2><p>Vimium 是chrome浏览器中的一款非常好用的插件，通过vimium，你将告别鼠标和触摸板，开始各种神操作。</p><h2 id="Vimium-Summary-Picture"><a href="#Vimium-Summary-Picture" class="headerlink" title="Vimium Summary Picture"></a>Vimium Summary Picture</h2><p><img src="/img/vimium.png" alt="Vimium Summary"></p><h2 id="Vimium-Summary"><a href="#Vimium-Summary" class="headerlink" title="Vimium Summary"></a>Vimium Summary</h2><p>同vim使用比较相似，常用的vimium操作有</p><ul><li><code>j</code> 向下翻， <code>d</code>向下翻页</li><li><code>k</code> 向上翻， <code>u</code>向上翻页</li><li><code>h</code> 向左翻， <code>l</code> 向右翻</li><li><code>x</code> 关闭当前页面， <code>X</code>回复关闭页面</li><li><code>t</code> 新建网页标签</li><li><code>yy</code> 粘贴当前网页链接</li><li><code>gg</code> 到网页顶端，<code>G</code>到网页底端</li><li><code>T</code> 查看当前浏览器所有网页</li><li><code>o</code> 打开浏览历史、标签；<code>O</code> 在新的标签页中打开</li><li><code>r</code> 重新加载标签页</li><li><code>f</code> 打开当前网页中的链接</li><li><code>/</code> 进入搜索模式， <code>n</code> 向下搜， <code>N</code>往回搜</li></ul>]]></content>
    
    <summary type="html">
    
      Vimium 是chrome浏览器中的一款非常好用的插件，通过vimium，你将告别鼠标和触摸板，开始各种神操作
    
    </summary>
    
      <category term="vimium" scheme="http://frankchu0229.github.io/categories/vimium/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="vim" scheme="http://frankchu0229.github.io/tags/vim/"/>
    
      <category term="tools" scheme="http://frankchu0229.github.io/tags/tools/"/>
    
      <category term="chrome" scheme="http://frankchu0229.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>TF Symposium 1.4.0 Summary</title>
    <link href="http://frankchu0229.github.io/2017/10/25/tf_symposium/"/>
    <id>http://frankchu0229.github.io/2017/10/25/tf_symposium/</id>
    <published>2017-10-25T08:15:23.000Z</published>
    <updated>2017-10-30T12:28:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TF-Symposium-Summary"><a href="#TF-Symposium-Summary" class="headerlink" title="TF Symposium Summary"></a>TF Symposium Summary</h1><h2 id="L2L-with-进化算法-by-YiFei-Feng"><a href="#L2L-with-进化算法-by-YiFei-Feng" class="headerlink" title="L2L with 进化算法 by YiFei Feng"></a>L2L with 进化算法 by YiFei Feng</h2><ul><li>循环网络： 控制器； </li><li>evolution algo： 淘汰 -&gt; 变异</li><li>用简单的模型初始化</li><li>重复进化步骤</li></ul><h2 id="TF-与-生物学"><a href="#TF-与-生物学" class="headerlink" title="TF 与 生物学"></a>TF 与 生物学</h2><ul><li>生物大数据</li><li>机器学习问题： regression，classification</li><li>Deep Variant: inception-v3,将在第四季或明年开源</li></ul><h2 id="TF-性能-by-Frank-Chen"><a href="#TF-性能-by-Frank-Chen" class="headerlink" title="TF 性能 by Frank Chen"></a>TF 性能 by Frank Chen</h2><ul><li>出现性能问题： 了解问题， 用分析器：</li><li>Timeline TF自带分析器, 用chrome打开profile文件， 查看瓶颈</li><li>复制内存：复制越多， tf运算图越慢</li><li>如何改进： 1. 优化输入管道， 使用流水线； 2. 优化模型计算， 使用fuzed batch-norm, 使得在GPU上更快；3. 数据格式， CPU，GPU数据格式； 4. 运算图， matcol； 5. 单GPU变量：变量放到一个GPU即可； 单机多GPU， 可以尝试使用GPU来作为变量ser ver；变量过大或者过多， 多GPU共享变量； 多机多GPU， 通过网络赋值内存，比单机慢；可以使用local CPU做cache； 高级分布式培训模式：在每一个GPU集群内部，使用一个GPU作为parameter server，在外部用cpu做cache。</li></ul><h2 id="TF-机器人应用-by-Pi-Chuan-Chang"><a href="#TF-机器人应用-by-Pi-Chuan-Chang" class="headerlink" title="TF 机器人应用 by Pi-Chuan Chang"></a>TF 机器人应用 by Pi-Chuan Chang</h2><ul><li>Challenges: safety, control, transfer</li><li>Minitaur: -&gt; robot platform</li><li>openAI Gym environemt interface -&gt; environment</li><li>agnet: 树莓派； 微控制器计算能力不足</li><li>ARChirecture: signal generator (sin() function -&gt; 周期性) + balanbce controller(Fully connected layers) -&gt; actions </li><li>transfer to real robot: system identification, env randomization</li></ul><h2 id="TF-高层API-by-Yifei-Feng"><a href="#TF-高层API-by-Yifei-Feng" class="headerlink" title="TF 高层API by Yifei Feng"></a>TF 高层API by Yifei Feng</h2><ul><li>Keras： 高层神经网络API， 默认使用tf作为后端</li><li>tf.keras: 自定义的tf后端，change: from keras -&gt; from tensorflow.keras</li><li><p>tf.layers and tf.keras.layers, 共享实现方式，基本上相同</p></li><li><p>Estimators: canned estimators, 实现好的模型</p></li><li>keras 模型 -&gt; model_to_estimator -&gt; estimator model</li></ul><h3 id="Distributed-TF"><a href="#Distributed-TF" class="headerlink" title="Distributed TF"></a>Distributed TF</h3><ul><li>tf的一个很大优势， dev summit 2017</li><li>estimators 可进行分布式执行</li><li>1.4 版本中找到</li></ul><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><ul><li>使用可以使用的最高层的API</li><li>用tf.layers and tf.keras 编写自定义模型</li><li>分布式训练 Estimators， 大部分情况下最好的选择</li></ul><h3 id="TF-Serving"><a href="#TF-Serving" class="headerlink" title="TF Serving"></a>TF Serving</h3><ul><li>github.com/tensorflow/serving</li><li>c++ libraries ： tf模型保存/输出格式； 通用核心模式</li><li>tf serving binariesL开箱急用的最佳实践， Docker容器， K8s教程</li></ul><h3 id="get-it"><a href="#get-it" class="headerlink" title="get it"></a>get it</h3><ul><li>pip apt-get 安装</li><li>www.tf.org/serving</li></ul><h2 id="TF-Lite（On-Smart-Devices）"><a href="#TF-Lite（On-Smart-Devices）" class="headerlink" title="TF Lite（On Smart Devices）"></a>TF Lite（On Smart Devices）</h2><ul><li>offline running on small devices</li><li>low-bandwidth, latency, power</li><li>Chanllenges: bandwith memory computation cpus</li><li>Tf works well on large services, tf-lite works on small devices</li><li>small binary size, low-overhead, optimized set of kernels</li><li>four parts: intepreter (optimized for all devices: few dependencies, small library less than 300k, fast load time, static memory plan, but no control flow), OPs/ kernels (NEON on ARM, Float &amp; quantized, many kernels for mobile apps), model file format (flatbuffers) mmap, more efficient than protocol buffer ; Hardware Acceleration (e.g., Android: Neural Network API; IOS: Core ML); Neural Network API: Part of Android Framework, tries to use as much hardware as possible. </li></ul><h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><ul><li>Developer preview: C++ and JAVA API</li><li>TOCO Converter</li><li>A set of builtin ops</li><li>Demo applications</li><li>Example models</li><li>MobileNet(Float)</li></ul><h2 id="Teaching-Machines-to-Draw"><a href="#Teaching-Machines-to-Draw" class="headerlink" title="Teaching Machines to Draw"></a>Teaching Machines to Draw</h2><ul><li>sketch-RNN: K encoder -&gt; Z (Latent Space Vectors)-&gt; Decoder </li></ul><hr>]]></content>
    
    <summary type="html">
    
      TF Symposium Summary
    
    </summary>
    
      <category term="tensorflow" scheme="http://frankchu0229.github.io/categories/tensorflow/"/>
    
      <category term="notes" scheme="http://frankchu0229.github.io/categories/tensorflow/notes/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="tensorflow" scheme="http://frankchu0229.github.io/tags/tensorflow/"/>
    
  </entry>
  
</feed>
