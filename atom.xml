<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank Chu</title>
  <icon>https://www.gravatar.com/avatar/7c04e9129318ea2b45bdf06f71529116</icon>
  <subtitle>The world need dreamers who do.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://frankchu0229.github.io/"/>
  <updated>2018-10-08T05:45:40.158Z</updated>
  <id>http://frankchu0229.github.io/</id>
  
  <author>
    <name>Frank Chu</name>
    <email>chushb@shanghaitech.edu.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Knowledge Representation Summary</title>
    <link href="http://frankchu0229.github.io/2018/10/08/kr-summary/"/>
    <id>http://frankchu0229.github.io/2018/10/08/kr-summary/</id>
    <published>2018-10-08T05:22:34.000Z</published>
    <updated>2018-10-08T05:45:40.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h2><h3 id="RDF"><a href="#RDF" class="headerlink" title="RDF"></a>RDF</h3><p>三元组, 表达能力有限。</p><h3 id="RDFS"><a href="#RDFS" class="headerlink" title="RDFS"></a>RDFS</h3><p>在RDF的基础上，添加了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class, subClassOf, type, Property, subPropertyOf, Domain, Range</div></pre></td></tr></table></figure><p>Examples:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">:hasCharacteristic a rdfs:Property ;</div><div class="line">                   rdfs:domain :Person .</div><div class="line"></div><div class="line">:hasHeightInInches rdfs:subPropertyOf :hasCharacteristics ;</div><div class="line">                   rdfs:domain xsd:int .</div><div class="line"></div><div class="line">:hasName           rdfs:subPropertyOf :hasCharacteristic ;</div><div class="line">                   rdfs:domain xsd:string .</div></pre></td></tr></table></figure><h3 id="OWL-词汇"><a href="#OWL-词汇" class="headerlink" title="OWL 词汇"></a>OWL 词汇</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">exp:运动员 owl:equivalentClass exp:体育选手 </div><div class="line">exp:获得 owl:equivalentProperty exp:取得</div><div class="line">exp:运动员A owl:sameIndividualAs exp:小明</div><div class="line">exp:ancestor rdf:type owl:TransitiveProperty</div><div class="line">exp:ancestor owl:inverseOf exp:descendant</div><div class="line">exp:hasMother rdf:type owl:FunctionalProperty // 每个人只有一个母亲</div><div class="line">exp:friend rdf:type owl:SymmetricProperty</div><div class="line">...</div></pre></td></tr></table></figure><h3 id="JsonLD"><a href="#JsonLD" class="headerlink" title="JsonLD"></a>JsonLD</h3><p>JsonLD 是一 种基于JSON表示和传输互联数据 (Linked Data)的方法, 在java、python等语言中，都有对jsonld的解析lib。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;http://schema.org/name&quot;: &quot;Manu Sporny&quot;,</div><div class="line">&quot;http://schema.org/url&quot;: &#123; &quot;@id&quot;:&quot;http://manu.sporny.org/&quot; &#125;, &quot;http://schema.org/image&quot;: &#123; &quot;@id&quot;:&quot;http://manu.sporny.org/images/manu.png&quot; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还有RDFa等，算是对知识的一种新型表示方法。</p><h3 id="各种典型知识图谱项目中的知识表示"><a href="#各种典型知识图谱项目中的知识表示" class="headerlink" title="各种典型知识图谱项目中的知识表示"></a>各种典型知识图谱项目中的知识表示</h3><h4 id="WordNet"><a href="#WordNet" class="headerlink" title="WordNet"></a>WordNet</h4><ul><li>linguistic 图谱</li><li>词之间语言学关系 (同义词、反义词、上位词、下位词)</li></ul><p>中文词汇网路 (Chinese Wordnet, 以下简称中文词网) 计画，目的是在提供完整的中文词义 (sense) 区分与词汇语意关系知识库。相信词义的区分与表达，必须建立在完善的词汇语意学 (lexical semantics) 理论与知识本体 (ontology) 架构基础上。在词义理论与认知研究方面，这个详细分析的词汇知识库系统，将成為语言学研究的基本参考资料。在实际的应用上，这个资料库可望成為中文语言处理与知识工程不可或缺的基底架构。</p><p>本计划自 2003 年起，迄今累积了近十年的研究成果，对词义区分定义，与词义知识表达方式，渐次做了修正。建构过程中，也曾发表於国内外相关研究机关与数个国际研讨会议，得到了许多有价值的建议。中文词网的网路搜寻介面，在 2006 年於中央研究院语言学研究所正式啟用，提供给各界检索使用。到 2010 计画执行结束前，网站资料与技术报告内容皆作同步更新。为了永续经营此项珍贵的中文词汇资源，目前计画网站转由国立台湾大学语言学研究所维护。</p><h4 id="DbPedia-amp-amp-CN-Depedia"><a href="#DbPedia-amp-amp-CN-Depedia" class="headerlink" title="DbPedia &amp;&amp; CN-Depedia"></a>DbPedia &amp;&amp; CN-Depedia</h4><p>百科知识图谱<br>CN-Depedia 整合了如百度百科、互动百科、中文维基百科等百科网站</p><h4 id="YAGO"><a href="#YAGO" class="headerlink" title="YAGO"></a>YAGO</h4><p> 多语言知识库，包含中文。</p><p>YAGO是由德国马普研究所研制的链接数据库。YAGO主要集成了Wikipedia、WordNet和GeoNames三个来源的数据。YAGO将WordNet的词汇定义与Wikipedia的分类体系进行了融合集成，使得YAGO具有更加丰富的实体分类体系。YAGO还考虑了时间和空间知识，为很多知识条目增加了时间和空间维度的属性描述。目前，YAGO包含1.2亿条三元组知识。YAGO是IBM Watson的后端知识库之一。</p><h4 id="Probase-amp-amp-CN-Probase"><a href="#Probase-amp-amp-CN-Probase" class="headerlink" title="Probase &amp;&amp; CN-Probase"></a>Probase &amp;&amp; CN-Probase</h4><ul><li>通用概念知识图谱    </li><li>包含约1700万实体、27万概念和3300万isa关系。</li><li>schema: Class, Entity, Property:isA (only), </li></ul><h4 id="FreeBase"><a href="#FreeBase" class="headerlink" title="FreeBase"></a>FreeBase</h4><p>类似于wikidata，由社区等众包而成，</p><p>Freebase is built on the notions of objects, facts, types, and properties. Each Freebase object has a stable identifier called a “mid” (for Machine ID), one or more types, and uses properties from these types in order to provide facts. For example, the Freebase object for Barack Obama has the mid /m/02mjmr and the type /government/us_president (among others) that allows the entity to have a fact with the property /government/us_president/presidency_number and the literal integer “44” as the value. </p><p>Freebase uses Compound Value Types (CVTs) to represent n-ary relations with n &gt; 2, e.g., values like geographic coordinates, political positions held with a start and an end date (see Figure 1 for an example), or actors playing a character in a movie. CVT values are just objects, i.e., they have a mid and can have types (although they usually only have the compound value type itself). Most non-CVT objects are called topics in order to discern them from CVTs.</p><p>The content of Freebase has been partially imported from various sources such as Wikipedia [1] or the license-compatible part of MusicBrainz [30]. Over the years, the Freebase community and Google have maintained the knowledge base. When Freebase was turned read-only on March 31, 2015, it counted more than 3 billion facts about almost 50 million entities. Freebase data is published as an N-Triples dump in RDF [6] under the Creative Commons CC-BY license.</p><h4 id="zhishi-me"><a href="#zhishi-me" class="headerlink" title="zhishi.me"></a>zhishi.me</h4><ul><li>百科知识图谱(中文百科，百度百科，互动百科)</li><li>通用领域知识图谱</li></ul><p><a href="http://zhishi.me/" target="_blank" rel="external">Zhishi.me</a> 通过从开放的百科数据中抽取结构化数据，首次尝试构建中文通用知识图谱。目前，已融合了三大中文百科，百度百科，互动百科以及维基百科中的数据。</p><h4 id="WikiData"><a href="#WikiData" class="headerlink" title="WikiData"></a>WikiData</h4><p>WikiData的目标是构建一个免费开放、多语言、任何人或机器都可以编辑修改的大规模链接知识库。WikiData由维基百科于2012年启动，早期得到微软联合创始人Paul Allen、Gordon Betty Moore基金会以及Google的联合资助。WikiData继承了Wikipedia的众包协作的机制，但与Wikipedia不同，WikiData支持的是以三元组为基础的知识条目（Items）的自由编辑。一个三元组代表一个关于该条目的陈述（Statements）。例如可以给“地球”的条目增加“”的三元组陈述。截止2016年，WikiData已经包含超过2470多万个知识条目。</p><p>Wikidata’s data model relies on the notions of item and statement. An item represents an entity, has a stable identifier called “qid”, and may have labels, descriptions, and aliases in multiple languages; further statements and links to pages about the entity in other Wikimedia projects—most prominently Wikipedia. Contrary to Freebase, Wikidata statements do not aim to encode true facts, but claims from different sources, which can also contradict each other, which, for example, allows for border conflicts to be expressed from different political points of view.</p><p><strong>中文dump <a href="http://openkg.cn/dataset/zhonto" target="_blank" rel="external">zh-onto</a></strong></p><h4 id="BabelNet"><a href="#BabelNet" class="headerlink" title="BabelNet"></a>BabelNet</h4><p><strong>多语言词典知识库</strong></p><p>BabelNet是类似于WordNet的多语言词典知识库。BabelNet的目标是解决WordNet在非英语语种中数据缺乏的问题。BabelNet采用的方法是将WordNet词典与Wikipedia百科集成。首先建立WordNet中的词与Wikipedia的页面标题的映射，然后利用Wikipedia中的多语言链接，再辅以机器翻译技术，来给WordNet增加多种语言的词汇。BabelNet3.7包含了271种语言，1400万同义词组，36.4万词语关系和3.8亿从Wikipedia中抽取的链接关系，总计超过19亿RDF三元组。 BabelNet集成了WordNet在词语关系上的优势和Wikipedia在多语言语料方面的优势，构建成功了目前最大规模的多语言词典知识库。</p><h4 id="ConceptNet"><a href="#ConceptNet" class="headerlink" title="ConceptNet"></a>ConceptNet</h4><p><strong>多语言常识知识库</strong></p><p>ConceptNet是常识知识库。最早源于MIT媒体实验室的Open Mind Common Sense (OMCS)项目。OMCS项目是由著名人工智能专家Marvin Minsky于1999年建议创立。ConceptNet主要依靠互联网众包、专家创建和游戏三种方法来构建。ConceptNet知识库以三元组形式的关系型知识构成。ConceptNet5版本已经包含有2800万关系描述。与Cyc相比，ConceptNet采用了非形式化、更加接近自然语言的描述，而不是像Cyc那样采用形式化的谓词逻辑。与链接数据和谷歌知识图谱相比，ConceptNet比较侧重于词与词之间的关系。从这个角度看，ConceptNet更加接近于WordNet，但是又比WordNet包含的关系类型多。此外，ConceptNet完全免费开放，并支持多种语言。</p><p>Cyc的扩展</p><h4 id="NELL"><a href="#NELL" class="headerlink" title="NELL"></a>NELL</h4><p>openIE的一种</p><h4 id="Schema-org-amp-amp-CN-Schema"><a href="#Schema-org-amp-amp-CN-Schema" class="headerlink" title="Schema.org &amp;&amp; CN-Schema"></a>Schema.org &amp;&amp; CN-Schema</h4><p><a href="http://cnschema.org/" target="_blank" rel="external">cnSchema.org</a>是一个基于社区维护的开放的知识图谱Schema标准。cnSchema的词汇集包括了上千种概念分类(classes)、数据类型(data types)、属性(propertities)和关系(relations)等常用概念定义，以支持知识图谱数据的通用性、复用性和流动性。结合中文的特点，我们复用、连接并扩展了<a href="http://schema.org/" target="_blank" rel="external">Schema.org</a>，Wikidata， Wikipedia等已有的知识图谱Schema标准，为中文领域的开放知识图谱、聊天机器人、搜索引擎优化等提供可供参考和扩展的数据描述和接口定义标准。通过cnSchema, 开发者也可以快速对接上百万基于<a href="http://schema.org/" target="_blank" rel="external">Schema.org</a>定义的网站，以及Bot的知识图谱数据API。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://openkg.cn/home" target="_blank" rel="external">OpenKG</a></li><li><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/44818.pdf" target="_blank" rel="external">From Freebase to Wikidata: The Great Migration</a></li></ul>]]></content>
    
    <summary type="html">
    
      Knowledge Representation Summary.
    
    </summary>
    
      <category term="Knowledge Graph" scheme="http://frankchu0229.github.io/categories/Knowledge-Graph/"/>
    
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="kg" scheme="http://frankchu0229.github.io/tags/kg/"/>
    
      <category term="kr" scheme="http://frankchu0229.github.io/tags/kr/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Functional Programming-3</title>
    <link href="http://frankchu0229.github.io/2018/10/07/java8-functional-programming3/"/>
    <id>http://frankchu0229.github.io/2018/10/07/java8-functional-programming3/</id>
    <published>2018-10-07T03:05:47.000Z</published>
    <updated>2018-10-07T07:51:41.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h2><h2 id="高级集合类和收集器"><a href="#高级集合类和收集器" class="headerlink" title="高级集合类和收集器"></a>高级集合类和收集器</h2><h2 id="数据并行化"><a href="#数据并行化" class="headerlink" title="数据并行化"></a>数据并行化</h2><h2 id="测试、调试和重构"><a href="#测试、调试和重构" class="headerlink" title="测试、调试和重构"></a>测试、调试和重构</h2><h2 id="设计和架构的原则"><a href="#设计和架构的原则" class="headerlink" title="设计和架构的原则"></a>设计和架构的原则</h2><h2 id="使用Lambda表达式编写并发程序"><a href="#使用Lambda表达式编写并发程序" class="headerlink" title="使用Lambda表达式编写并发程序"></a>使用Lambda表达式编写并发程序</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.amazon.com/Java-Lambdas-Functional-Programming-Masses/dp/1449370772" target="_blank" rel="external">Java 8 Lambdas: Functional Programming for the Masses</a></li></ul>]]></content>
    
    <summary type="html">
    
      Java8 Lambdas Functional Programming Summary.
    
    </summary>
    
      <category term="Java" scheme="http://frankchu0229.github.io/categories/Java/"/>
    
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="java" scheme="http://frankchu0229.github.io/tags/java/"/>
    
      <category term="coding" scheme="http://frankchu0229.github.io/tags/coding/"/>
    
      <category term="functional programming" scheme="http://frankchu0229.github.io/tags/functional-programming/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Functional Programming-2</title>
    <link href="http://frankchu0229.github.io/2018/10/05/java8-functional-programming2/"/>
    <id>http://frankchu0229.github.io/2018/10/05/java8-functional-programming2/</id>
    <published>2018-10-05T03:05:47.000Z</published>
    <updated>2018-10-07T07:51:42.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>Java8 对核心库的更改主要包括对集合类新增API和引入Stream，Stream使得程序员能够在更高的抽象层级上对集合进行操作。</p><p><code>Stream 是函数式编程在集合类上进行复杂操作的工具</code></p><p>先来看一个例子，在java8之前，我们通常会写很多这样的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int count = 0;</div><div class="line">for (Artist artist : Artists) &#123;</div><div class="line">  if (artist.isFrom(&quot;London&quot;)) &#123;</div><div class="line">    ++count;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种通过for循环的写法，实际上是封装了迭代的语法糖，它属于<code>外部迭代</code>(通过Iterator对象的hasNext和next方法来完成迭代)，等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int count = 0;</div><div class="line">Iterator&lt;Artist&gt; iterator = Artists.iterator();</div><div class="line">while (iterator.hasNext()) &#123;</div><div class="line">  Artist artist = iterator.next();</div><div class="line">  if (artist.isFrom(&quot;London&quot;)) &#123;</div><div class="line">    ++count;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然而通过外部迭代的方式有以下若干缺陷：</p><ul><li>串行化操作，for循环变成并行方式比较麻烦</li><li>方法和行为混在一起</li></ul><p>我们可以通过<code>内部迭代</code>的方式来实现，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int count = Artists.stream().filter(Artist::isFrom(&quot;London&quot;)).count();</div></pre></td></tr></table></figure><p>这种实现可读性也更好一些。</p><h3 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h3><p>在上面的操作中，我们分为过滤和计数两个步骤来进行实现，那么上面基于Stream的方式是怎么实现的呢，是不是比for循环的方式复杂度要高呢？</p><p>在Stream中，操作主要分为：<code>惰性求值</code>和<code>及早求值</code>两种方式。惰性求值返回值仍是stream，而及早求值返回另一个值或者null。Stream中的多个惰性求值操作形成一个惰性求值链，最后由一个及早求值操作返回想要的结果。这也意味着可以有多个级连操作，但是只迭代一次。</p><p>例如，在上面的的例子中，filter就是惰性求值操作，count是及早求值操作。</p><h3 id="常见Stream操作"><a href="#常见Stream操作" class="headerlink" title="常见Stream操作"></a>常见Stream操作</h3><h4 id="惰性求值操作"><a href="#惰性求值操作" class="headerlink" title="惰性求值操作"></a>惰性求值操作</h4><ul><li><p>map 将一种类型的值转变为另一种值, 即接受一个Function<t, r="">的函数式接口</t,></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; collected = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;).map(String::toUpperCase()).collect(Collectors.toList());</div></pre></td></tr></table></figure></li><li><p>filter 接收一个Predicate<t>, 即输入为T，返回boolean型变量</t></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int count = Artists.stream().filter(Artist::isFrom(&quot;London&quot;)).count();</div></pre></td></tr></table></figure></li><li><p>flatMap flattern Stream of stream and then map, map接收T类型参数，返回Stream，即Function<t, stream=""></t,></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; collected = Stream.of(asList(&quot;a&quot;, &quot;b&quot;), asList(&quot;c&quot;, &quot;d&quot;)).flatMap(List::stream).collect(Collectors.toList());</div></pre></td></tr></table></figure></li><li><p>distinct </p></li><li>limit</li></ul><h4 id="及早求值操作-终止型操作"><a href="#及早求值操作-终止型操作" class="headerlink" title="及早求值操作/终止型操作"></a>及早求值操作/终止型操作</h4><ul><li><p>collect </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; collected = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) // Stream 的of方法使用一组初始值来生成新的Stream</div><div class="line">.collect(Collectoris.toList());</div></pre></td></tr></table></figure></li><li><p>max 传入Comparator T对象, 返回Optional<t></t></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;Track&gt; tracks = Arrays.asList(new Track(&quot;a&quot;, 524), new Track(&quot;b&quot;, 378, new Track(&quot;c&quot;, 451)));</div><div class="line">Track maxTrack = tracks.stream().max(Comparator.comparing(Track::getLength())).get(); // java8 中，comparing作为工厂方法可以接收一个函数表达式，返回一个Comparator, Comparator有且仅有一个抽象接口，因此为函数式接口。</div></pre></td></tr></table></figure></li><li><p>min</p></li><li>count</li><li><p>reduce 更通用的方式, reduce 可以从一组值中生成一个值，像min，max，count等都属于reduce操作. 对于一组值的迭代，通常可以用以下方式来进行：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Object accumulator = initValue;</div><div class="line">for (Object element : collections) &#123;</div><div class="line">  accumulator = combine(accumulator, element)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>在这个计算中，只有initValue和combine是不确定的，因此只需要指定这两个就可以实现一个reduce操作。即reduce操作接收一个初始值和一个BinaryOperator操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int count = Stream.of(1,2,3).reduce(0, (acc, element)-&gt; acc + element );</div></pre></td></tr></table></figure><p>以上例子用reduce实现了一个sum的操作。</p><ul><li>findAny, findFirst, anyMatch, allMatch, forEach</li><li>collect</li></ul><h3 id="正确使用lambda表达式"><a href="#正确使用lambda表达式" class="headerlink" title="正确使用lambda表达式"></a>正确使用lambda表达式</h3><p>lambda表达式的使用应该是<code>无副作用</code>的，即<code>只通过函数返回值就能充分理解函数的作用</code>。</p><ul><li>在lambda表达式内部使用局部变量，该变量应该是<code>既成事实上必须是final的</code></li><li>forEach 方法是一个终结方法，可以有副作用。</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.amazon.com/Java-Lambdas-Functional-Programming-Masses/dp/1449370772" target="_blank" rel="external">Java 8 Lambdas: Functional Programming for the Masses</a></li></ul>]]></content>
    
    <summary type="html">
    
      Java8 Lambdas Functional Programming Summary.
    
    </summary>
    
      <category term="Java" scheme="http://frankchu0229.github.io/categories/Java/"/>
    
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="java" scheme="http://frankchu0229.github.io/tags/java/"/>
    
      <category term="coding" scheme="http://frankchu0229.github.io/tags/coding/"/>
    
      <category term="functional programming" scheme="http://frankchu0229.github.io/tags/functional-programming/"/>
    
  </entry>
  
  <entry>
    <title>Virtualenv Summary</title>
    <link href="http://frankchu0229.github.io/2018/09/27/virtualenv-summary/"/>
    <id>http://frankchu0229.github.io/2018/09/27/virtualenv-summary/</id>
    <published>2018-09-27T06:59:03.000Z</published>
    <updated>2018-09-27T07:08:52.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Conda 在使用时还是稍微有些重，virtualenv可以对每一个项目创建一个虚拟环境，然后对每一个项目的python环境进行隔离。</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><ul><li><code>pip install virtualenv</code> to install</li><li><code>virtualenv ENV</code> to create virtual env in the directory <code>ENV</code>, which will create <code>bin</code>, <code>lib</code>, <code>include</code>.</li><li><code>source bin/activate</code> to activate the current env.</li><li><code>deactivate</code> to deactivate the current env.</li><li><code>rm -rf ENV</code> to rm the current virtual env.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="external">User Guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      Virtualenv Summary.
    
    </summary>
    
      <category term="Python Env Management." scheme="http://frankchu0229.github.io/categories/Python-Env-Management/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="tools" scheme="http://frankchu0229.github.io/tags/tools/"/>
    
      <category term="virtualenv" scheme="http://frankchu0229.github.io/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Functional Programming-1</title>
    <link href="http://frankchu0229.github.io/2018/09/02/java8-functional-programming/"/>
    <id>http://frankchu0229.github.io/2018/09/02/java8-functional-programming/</id>
    <published>2018-09-02T06:54:53.000Z</published>
    <updated>2018-10-07T03:07:56.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ul><li>在Java8之前，java代码的抽象程度不够，同时还欠缺高效的并行操作。</li><li>Java8中引入了lambda表达式，面向对象编程可以看作是对数据进行抽象，而函数式编程是对行为进行抽象，数据与行为并存。</li><li>函数式编程使得编写<code>回调函数</code>和<code>事件处理程序</code>时，不必再纠缠与匿名内部类的弱可读性以及冗繁性。</li><li>增加了default方法，丰富了接口设计中的操作。</li><li>函数式编程核心: 使用不可变值和函数，函数将一个值进行处理，转变为另一个值。</li></ul><h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><p>Java8 最大的变化就是引入了lambda表达式，一种紧凑的、传递行为的方式。</p><h3 id="Lambda-表达式的几种表达方式"><a href="#Lambda-表达式的几种表达方式" class="headerlink" title="Lambda 表达式的几种表达方式"></a>Lambda 表达式的几种表达方式</h3><ul><li><code>Runnable noArgmants = () -&gt; System.out.println(&quot;Hello World&quot;);</code></li><li><code>ActionListener oneArgument = event -&gt; System.out.println(&quot;button clicked&quot;)</code></li><li><code>Runnable multiStatement = () -&gt; { System.out.println(&quot;Hello&quot;); System.out.println(&quot;World&quot;); }</code></li><li><code>BinaryOperator&lt;Long&gt; add = (x, y) -&gt; x + y</code> // 参数类型由编译器推断出来</li><li><code>BinaryOperator&lt;Long&gt; add = (Long x, Long y) -&gt; x + y</code> // 显示指定参数类型</li></ul><h3 id="Lambda-表达式引用的是值，而不是变量"><a href="#Lambda-表达式引用的是值，而不是变量" class="headerlink" title="Lambda 表达式引用的是值，而不是变量"></a>Lambda 表达式引用的是值，而不是变量</h3><p>Lambda 表达式引用的是值，而不是变量，即该变量是既成事实上的final，<code>可以不声明为final，但是该变量只能被赋值一次</code>。</p><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>函数式接口是指只含有一个抽象方法的接口，用作lambda表达式的类型，用来表示行为。为了表示该接口作为函数式接口来用，最好标识 <code>@FunctionalInterface</code>.</p><p>常用的jdk中提供的函数式接口：</p><ul><li><code>Predict&lt;T&gt;</code> 参数T， 返回boolean</li><li><code>Consumer&lt;T&gt;</code> 参数T， 返回void</li><li><code>Supplier&lt;T&gt;</code> 参数 None， 返回T</li><li><code>Function&lt;T, R&gt;</code> 参数T，返回R</li><li><code>UnaryOperator&lt;T&gt;</code> 参数T， 返回T</li><li><code>BinaryOperator&lt;T, T&gt;</code> 参数T，T 返回T</li></ul><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>在java7中，就有了用菱形操作符来使得javac编译器自动推断类型， 例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); // 变量类型推断</div><div class="line">Map&lt;String, String&gt; map1 = new HashMap&lt;String, String&gt;()</div></pre></td></tr></table></figure><p>同样在java7中，将构造函数直接传递给一个方法，编译器可以通过方法签名来做推断，使得泛型可以被省略。<br>java8 更进一步，lambda表达式可以省略所有参数类型。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.amazon.com/Java-Lambdas-Functional-Programming-Masses/dp/1449370772" target="_blank" rel="external">Java 8 Lambdas: Functional Programming for the Masses</a></li></ul>]]></content>
    
    <summary type="html">
    
      Java8 Lambdas Functional Programming Summary.
    
    </summary>
    
      <category term="Java" scheme="http://frankchu0229.github.io/categories/Java/"/>
    
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="java" scheme="http://frankchu0229.github.io/tags/java/"/>
    
      <category term="coding" scheme="http://frankchu0229.github.io/tags/coding/"/>
    
      <category term="functional programming" scheme="http://frankchu0229.github.io/tags/functional-programming/"/>
    
  </entry>
  
  <entry>
    <title>Keras Siamese Network</title>
    <link href="http://frankchu0229.github.io/2018/09/02/keras-siamese-network/"/>
    <id>http://frankchu0229.github.io/2018/09/02/keras-siamese-network/</id>
    <published>2018-09-02T02:11:21.000Z</published>
    <updated>2018-09-02T02:25:26.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>孪生网络 (Siamese Network) 常用在matching等任务上，所谓孪生，是指左右两侧共用同一套网络。</p><h2 id="Implementation-by-Keras"><a href="#Implementation-by-Keras" class="headerlink" title="Implementation by Keras"></a>Implementation by Keras</h2><p>Model Implementation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line"># @Author: Frank Chu</div><div class="line"># @Date: 2018-06-28</div><div class="line"></div><div class="line">from __future__ import print_function</div><div class="line">import numpy as np</div><div class="line">from keras.preprocessing.sequence import pad_sequences</div><div class="line">from keras.models import Model, load_model</div><div class="line">from keras.layers import Dense, Input, Dropout, Embedding, GRU, Bidirectional, \</div><div class="line">    Subtract, Multiply, concatenate, BatchNormalization, Add</div><div class="line">from utils import preprocess, process_embedding_table</div><div class="line">from keras.callbacks import CSVLogger</div><div class="line">import tensorflow as tf</div><div class="line">import keras.backend.tensorflow_backend as KTF</div><div class="line"></div><div class="line"></div><div class="line">class SiameseMatcher:</div><div class="line">    def __init__(self):</div><div class="line">        self._word_vocab_size = 20892</div><div class="line">        self._word_embed_size = 300</div><div class="line">        self._word_sequence_max_length = 15</div><div class="line">        self._char_vocab_size = 3048</div><div class="line">        self._char_embed_size = 300</div><div class="line">        self._char_sequence_max_length = 30</div><div class="line"></div><div class="line">        self._word_embed_path = &apos;../../dataset/word_embed.txt&apos;</div><div class="line">        self._char_embed_path = &apos;../../dataset/char_embed.txt&apos;</div><div class="line">        self._word_corpus_path = &apos;./data/word_corpus.txt&apos;</div><div class="line">        self._char_corpus_path = &apos;./data/char_corpus.txt&apos;</div><div class="line">        self._train_word_data_path = &apos;./data/train_word_data.txt&apos;</div><div class="line">        self._test_word_data_path = &apos;./data/test_word_data.txt&apos;</div><div class="line">        self._train_char_data_path = &apos;./data/train_char_data.txt&apos;</div><div class="line">        self._test_char_data_path = &apos;./data/test_char_data.txt&apos;</div><div class="line">        self._train_word_query = None</div><div class="line">        self._train_word_answer = None</div><div class="line">        self._train_word_label = None</div><div class="line">        self._test_word_query = None</div><div class="line">        self._test_word_answer = None</div><div class="line"></div><div class="line">        self._word_embed_table = None</div><div class="line">        self._char_embed_table = None</div><div class="line">        self._word_index = None</div><div class="line">        self._char_index = None</div><div class="line"></div><div class="line">        self._batch_size = 256</div><div class="line">        self._epoch = 1</div><div class="line">        self._validation_split = 0.15</div><div class="line">        self._lstm_dim = 256</div><div class="line"></div><div class="line">    def process_train(self):</div><div class="line">        self._word_index, self._train_word_query, \</div><div class="line">        self._train_word_answer, self._train_word_label = preprocess(</div><div class="line">            self._word_corpus_path, self._train_word_data_path,</div><div class="line">            self._word_sequence_max_length, mode=&apos;train&apos;</div><div class="line">        )</div><div class="line">        self._word_embed_table = process_embedding_table(self._word_embed_path,</div><div class="line">                                                         self._word_index)</div><div class="line">        np.save(&apos;./data/word_index&apos;, self._word_index)</div><div class="line">        np.save(&apos;./data/train_word_query&apos;, self._train_word_query)</div><div class="line">        np.save(&apos;./data/train_word_answer&apos;, self._train_word_answer)</div><div class="line">        np.save(&apos;./data/train_word_label&apos;, self._train_word_label)</div><div class="line">        np.save(&apos;./data/word_embed_table&apos;, self._word_embed_table)</div><div class="line">        print(&quot;Preprocess Finished.&quot;)</div><div class="line"></div><div class="line">    def process_test(self):</div><div class="line">        _index, self._test_word_query, \</div><div class="line">        self._test_word_answer, _label = preprocess(</div><div class="line">            self._word_corpus_path, self._test_word_data_path,</div><div class="line">            self._word_sequence_max_length, mode=&apos;test&apos;</div><div class="line">        )</div><div class="line">        np.save(&apos;./data/test_word_query&apos;, self._test_word_query)</div><div class="line">        np.save(&apos;./data/test_word_answer&apos;, self._test_word_answer)</div><div class="line"></div><div class="line">        print(&quot;Test Preprocess Finished.&quot;)</div><div class="line"></div><div class="line">    def build_model(self):</div><div class="line">        query_word_sequence_input = Input(</div><div class="line">            shape=(self._word_sequence_max_length,))</div><div class="line">        answer_word_sequence_input = Input(</div><div class="line">            shape=(self._word_sequence_max_length,))</div><div class="line"></div><div class="line">        word_embedding_layer = Embedding(self._word_vocab_size,</div><div class="line">                                         self._word_embed_size,</div><div class="line">                                         weights=[self._word_embed_table],</div><div class="line">                                         input_length=self._word_sequence_max_length)</div><div class="line">        bi_lstm_layer = Bidirectional(</div><div class="line">            GRU(self._lstm_dim, dropout=0.4, recurrent_dropout=0.2,</div><div class="line">                return_sequences=True))</div><div class="line">        second_lstm_layer = Bidirectional(</div><div class="line">            GRU(self._lstm_dim, dropout=0.4, recurrent_dropout=0.2))</div><div class="line"></div><div class="line">        droupour_layer = Dropout(0.5)</div><div class="line"></div><div class="line">        q1 = word_embedding_layer(query_word_sequence_input)</div><div class="line">        q1 = droupour_layer(q1)</div><div class="line">        q1 = bi_lstm_layer(q1)</div><div class="line">        q1 = second_lstm_layer(q1)</div><div class="line">        q2 = word_embedding_layer(answer_word_sequence_input)</div><div class="line">        q2 = droupour_layer(q2)</div><div class="line">        q2 = bi_lstm_layer(q2)</div><div class="line">        q2 = second_lstm_layer(q2)</div><div class="line">        q_diff = Subtract()([q1, q2])</div><div class="line">        q_mul = Multiply()([q1, q2])</div><div class="line">        q_add = Add()([q1, q2])</div><div class="line">        merged = concatenate([q1, q2, q_add, q_diff, q_mul])</div><div class="line"></div><div class="line">        merged = Dense(256, activation=&apos;relu&apos;)(merged)</div><div class="line">        merged = BatchNormalization()(merged)</div><div class="line">        merged = Dense(256, activation=&apos;relu&apos;)(merged)</div><div class="line">        merged = BatchNormalization()(merged)</div><div class="line">        merged = Dense(128, activation=&apos;relu&apos;)(merged)</div><div class="line">        merged = BatchNormalization()(merged)</div><div class="line">        prediction = Dense(2, activation=&apos;softmax&apos;)(merged)</div><div class="line"></div><div class="line">        model = Model(</div><div class="line">            inputs=[query_word_sequence_input, answer_word_sequence_input],</div><div class="line">            outputs=prediction)</div><div class="line">        model.compile(loss=&apos;categorical_crossentropy&apos;, optimizer=&apos;adam&apos;,</div><div class="line">                      metrics=[&apos;accuracy&apos;])</div><div class="line">        return model</div><div class="line"></div><div class="line">    def train(self):</div><div class="line">        self._word_index = np.load(&apos;./data/word_index.npy&apos;)</div><div class="line">        self._train_word_query = np.load(&apos;./data/train_word_query.npy&apos;)</div><div class="line">        self._train_word_answer = np.load(&apos;./data/train_word_answer.npy&apos;)</div><div class="line">        self._train_word_label = np.load(&apos;./data/train_word_label.npy&apos;)</div><div class="line">        self._word_embed_table = np.load(&apos;./data/word_embed_table.npy&apos;)</div><div class="line">        model = self.build_model()</div><div class="line">        csv_logger = CSVLogger(&apos;log.csv&apos;, append=True, separator=&apos;;&apos;)</div><div class="line">        model.fit([self._train_word_query, self._train_word_answer],</div><div class="line">                  self._train_word_label,</div><div class="line">                  batch_size=self._batch_size, epochs=self._epoch,</div><div class="line">                  validation_split=self._validation_split,</div><div class="line">                  callbacks=[csv_logger])</div><div class="line">        model.save(&apos;./model&apos;)</div><div class="line"></div><div class="line">    def train_all(self, model_path):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        train the final model using train and dev data.</div><div class="line">        :return:</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        self._word_index = np.load(&apos;./data/word_index.npy&apos;)</div><div class="line">        self._train_word_query = np.load(&apos;./data/train_word_query.npy&apos;)</div><div class="line">        self._train_word_answer = np.load(&apos;./data/train_word_answer.npy&apos;)</div><div class="line">        self._train_word_label = np.load(&apos;./data/train_word_label.npy&apos;)</div><div class="line">        self._word_embed_table = np.load(&apos;./data/word_embed_table.npy&apos;)</div><div class="line">        model = load_model(model_path)</div><div class="line">        model.fit([self._train_word_query, self._train_word_answer],</div><div class="line">                  self._train_word_label,</div><div class="line">                  batch_size=self._batch_size, epochs=self._epoch + 2)</div><div class="line">        model.save(&apos;./final-model&apos;)</div><div class="line"></div><div class="line">    def predict(self, model_path):</div><div class="line">        self._test_word_query = np.load(&apos;./data/test_word_query.npy&apos;)</div><div class="line">        self._test_word_answer = np.load(&apos;./data/test_word_answer.npy&apos;)</div><div class="line">        model = load_model(model_path)</div><div class="line">        prediction = model.predict(</div><div class="line">            [self._test_word_query, self._test_word_answer],</div><div class="line">            batch_size=512)</div><div class="line">        print(prediction)</div><div class="line">        np.save(&apos;./predictions&apos;, prediction)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    model = SiameseMatcher()</div><div class="line">    # model.process_train()</div><div class="line">    # model.process_test()</div><div class="line"></div><div class="line">    config = tf.ConfigProto()</div><div class="line">    config.gpu_options.allow_growth = True  # 不全部占满显存, 按需分配</div><div class="line">    session = tf.Session(config=config)</div><div class="line">    # 设置session</div><div class="line">    KTF.set_session(session)</div><div class="line"></div><div class="line">    model.train()</div></pre></td></tr></table></figure><p>Data Process Implementation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line"># @Author: Frank Chu</div><div class="line"># @Date: 2018-06-28</div><div class="line"></div><div class="line">from keras.preprocessing.text import Tokenizer</div><div class="line">from keras.preprocessing.sequence import pad_sequences</div><div class="line">from keras.utils import to_categorical</div><div class="line">from numpy import asarray, zeros</div><div class="line">import numpy as np</div><div class="line"></div><div class="line"></div><div class="line">def load_file(path):</div><div class="line">    data = list()</div><div class="line">    with open(path, &apos;rt&apos;, encoding=&apos;utf-8&apos;) as fo:</div><div class="line">        for line in fo:</div><div class="line">            data.append(line.strip())</div><div class="line">    return data</div><div class="line"></div><div class="line"></div><div class="line">def preprocess(corpus_path, data_path, max_length, mode=&apos;train&apos;):</div><div class="line">    corpus = load_file(corpus_path)</div><div class="line">    tokenizer = Tokenizer(lower=False)</div><div class="line">    tokenizer.fit_on_texts(corpus)</div><div class="line">    print(tokenizer.word_index)</div><div class="line">    data = load_file(data_path)</div><div class="line">    label, query, answer = process_data_set(data, mode)</div><div class="line">    encoded_query = tokenizer.texts_to_sequences(query)</div><div class="line">    padded_query = pad_sequences(encoded_query, maxlen=max_length,</div><div class="line">                                 padding=&apos;post&apos;)</div><div class="line">    encoded_answer = tokenizer.texts_to_sequences(answer)</div><div class="line">    padded_answer = pad_sequences(encoded_answer, maxlen=max_length,</div><div class="line">                                  padding=&apos;post&apos;)</div><div class="line">    if mode == &apos;train&apos;:</div><div class="line">        label = to_categorical(asarray(label))</div><div class="line"></div><div class="line">    return tokenizer.word_index, padded_query, padded_answer, label</div><div class="line"></div><div class="line"></div><div class="line">def process_data_set(data, mode=&apos;train&apos;):</div><div class="line">    label = []</div><div class="line">    query = []</div><div class="line">    answer = []</div><div class="line">    if mode == &apos;train&apos;:</div><div class="line">        for line in data:</div><div class="line">            splits = line.split(&quot;\t&quot;)</div><div class="line">            label.append(splits[0])</div><div class="line">            query.append(splits[1])</div><div class="line">            answer.append(splits[2])</div><div class="line">    else:</div><div class="line">        for line in data:</div><div class="line">            splits = line.split(&quot;\t&quot;)</div><div class="line">            query.append(splits[0])</div><div class="line">            answer.append(splits[1])</div><div class="line">    return label, query, answer</div><div class="line"></div><div class="line"></div><div class="line">def process_embedding_table(embedding_path, word_index):</div><div class="line">    embedding_data = load_file(embedding_path)</div><div class="line">    splits = embedding_data[0].split(&apos; &apos;)</div><div class="line">    vocab, dim = splits[0], splits[1]</div><div class="line">    print(&quot;vacab size &#123;&#125; and len of embedding data is &#123;&#125;&quot;.format(vocab,</div><div class="line">                                                                 len(</div><div class="line">                                                                     embedding_data)))</div><div class="line">    print(&apos;word index dict size is &#123;&#125;&apos;.format(len(word_index)))</div><div class="line">    # assert vocab == len(word_index)</div><div class="line">    embedding_index = dict()</div><div class="line">    for line in embedding_data:</div><div class="line">        values = line.split(&apos; &apos;)</div><div class="line">        if len(values) == 2:</div><div class="line">            continue</div><div class="line">        word = values[0]</div><div class="line">        vector = asarray(values[1:], dtype=&apos;float32&apos;)</div><div class="line">        embedding_index[word] = vector</div><div class="line"></div><div class="line">    embedding_matrix = zeros((int(vocab) + 1, int(dim)))</div><div class="line">    for word, i in word_index.items():</div><div class="line">        embedding_vector = embedding_index.get(word)</div><div class="line">        if embedding_vector is not None:</div><div class="line">            embedding_matrix[i] = embedding_vector</div><div class="line">        else:</div><div class="line">            print(&apos;word is &#123;&#125; and i is &#123;&#125;&apos;.format(word, i))</div><div class="line">    return embedding_matrix</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://keras.io/zh/" target="_blank" rel="external">keras</a></li></ul>]]></content>
    
    <summary type="html">
    
      Keras Siamese Network.
    
    </summary>
    
      <category term="Machine Learning" scheme="http://frankchu0229.github.io/categories/Machine-Learning/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="keras" scheme="http://frankchu0229.github.io/tags/keras/"/>
    
      <category term="dl" scheme="http://frankchu0229.github.io/tags/dl/"/>
    
  </entry>
  
  <entry>
    <title>Semi-supervised Learning And Active Learning Summary</title>
    <link href="http://frankchu0229.github.io/2018/08/20/semi-supervised-learning/"/>
    <id>http://frankchu0229.github.io/2018/08/20/semi-supervised-learning/</id>
    <published>2018-08-20T03:24:06.000Z</published>
    <updated>2018-09-02T05:14:15.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在很多场景下(e.g., 业务冷启动)，labelled data是很少的，这时候会去尝试用无监督或者半监督的方式来解决实际中的问题。所谓半监督，就是既用了有标注的数据，又用了未标注的数据。<br>半监督学习和主动学习都是在标注数据少的情况下的一种解决方式。但是我们常说的半监督学习的方式偏向于不需要人工干涉，自动的对未标注数据进行利用。而主动学习(Active Learning)需要外在的相关领域人员进行数据标注，是一个人际协调交互的过程。</p><h2 id="Active-Learning"><a href="#Active-Learning" class="headerlink" title="Active Learning"></a>Active Learning</h2><p>原始数据量是很大的，但是怎么进行标注呢？对所有数据都标注一遍的成本是巨大的。一种方式可以使用<code>主动学习</code>的方式进行标注，减少标注成本。</p><p><code>核心思想</code>：主动学习会选择那些比较难分类的样本，然后由人工进行标注。</p><p><code>步骤</code>:</p><ol><li>从原始数据中随机采样，进行人工标注</li><li>用标注的数据训练分类器，对未标注的数据进行预测</li><li>挑选那些信息量大的样本进行标注， 对于二分类任务，选择那些概率在0.5附近的样本</li><li>重复步骤2和3， 直到 <ul><li>没有更多数据进行标注</li><li>当前分类器性能达到要求</li><li>挑选出来的信息量大的样本，人工无法进行标注</li></ul></li></ol><h2 id="Semi-supervised-Learning"><a href="#Semi-supervised-Learning" class="headerlink" title="Semi-supervised Learning"></a>Semi-supervised Learning</h2><p>Semi-supervised learning 包含的内容比较多，for more info，可以看周志华老师的西瓜书，这里只介绍常用到的自学习和协同学习。</p><h3 id="Self-Learning-自学习-Self-Training"><a href="#Self-Learning-自学习-Self-Training" class="headerlink" title="Self Learning 自学习 (Self Training)"></a>Self Learning 自学习 (Self Training)</h3><p><code>步骤</code></p><ol><li>输入：原始未标注数据，部分标注数据</li><li>用标注数据训练模型, e.g., 分类模型</li><li>用训练好的模型原始数据进行预测</li><li>从预测的数据中选择 最有把握的(e.g., 概率大于0.9) 加入到训练集中，并把他们从未标注数据集中移除</li><li>重复步骤2-4， 直到<ul><li>模型性能达标</li><li>数据集不再变化</li></ul></li></ol><h3 id="Co-Training-协同训练"><a href="#Co-Training-协同训练" class="headerlink" title="Co-Training 协同训练"></a>Co-Training 协同训练</h3><p>Co-training 和self-learning的步骤类似，以下以二分类任务为例：</p><p><code>步骤</code></p><p>该算法假设数据属性拥有两个充分冗余（sufficient and redundant）的视图，称之为 view1 和 view2; view1, view2 一种对用的例子是特征的划分。</p><p>算法基本流程是：</p><ol><li>首先在标记数据集 L 的 view1 和 view2分别上训练出两个分类器 C1 和 C2；</li><li>然后从未标记数据集 U 上随机的选取 u 个示例放入集合 U’中；分别用 C1 和 C2 对 U’中的所有元素进行标记；</li><li>接着从两个分类器标记结果中各取可信度最高的 p 个正标记和 n 个负标记放入 L 中；</li><li>最后从 U 中选取 2p+2n 个数据补充到 U’中；</li><li>重复上述过程直到满足截止条件。</li></ol><p>值得注意的是这两个视图应该是相互独立的。考虑一个极端的情况如果 view1 和 view2 是全相关的，那么由 view1 的到分类器和由 view2 训练得到的分类器对相同待标记示例的标记是完全一样的，这样以来Co-Training 算法就退化成了 self-training 算法。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://lamda.nju.edu.cn/huangsj/dm11/files/gaoy.pdf" target="_blank" rel="external">http://lamda.nju.edu.cn/huangsj/dm11/files/gaoy.pdf</a></li><li><a href="https://blog.csdn.net/u014520745/article/details/45054481" target="_blank" rel="external">https://blog.csdn.net/u014520745/article/details/45054481</a></li><li><a href="https://www.zhihu.com/question/265479171" target="_blank" rel="external">https://www.zhihu.com/question/265479171</a></li><li><a href="https://zhuanlan.zhihu.com/p/29583536" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/29583536</a></li><li><a href="https://blog.csdn.net/qq_35994754/article/details/73457817" target="_blank" rel="external">https://blog.csdn.net/qq_35994754/article/details/73457817</a></li></ul>]]></content>
    
    <summary type="html">
    
      Semi-supervised Learning And Active Learning Summary.
    
    </summary>
    
      <category term="Machine Learning" scheme="http://frankchu0229.github.io/categories/Machine-Learning/"/>
    
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="ml" scheme="http://frankchu0229.github.io/tags/ml/"/>
    
      <category term="semi-supervised learning" scheme="http://frankchu0229.github.io/tags/semi-supervised-learning/"/>
    
      <category term="active learning" scheme="http://frankchu0229.github.io/tags/active-learning/"/>
    
  </entry>
  
  <entry>
    <title>Kg 2018 Mind Map</title>
    <link href="http://frankchu0229.github.io/2018/08/12/kg-mind-map/"/>
    <id>http://frankchu0229.github.io/2018/08/12/kg-mind-map/</id>
    <published>2018-08-12T03:24:37.000Z</published>
    <updated>2018-10-08T05:25:07.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mind-Map"><a href="#Mind-Map" class="headerlink" title="Mind Map"></a>Mind Map</h2><div align="center"><br><img src="/img/kg_mind_map.png" width="500" height="200" align="center"><br></div><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://mp.weixin.qq.com/s/WdWR_QXNumx_p3uVaoq52w" target="_blank" rel="external">KG 2018 Report</a></li></ul>]]></content>
    
    <summary type="html">
    
      Knowledge Graph Mind Map.
    
    </summary>
    
      <category term="Knowledge Graph" scheme="http://frankchu0229.github.io/categories/Knowledge-Graph/"/>
    
    
      <category term="summary" scheme="http://frankchu0229.github.io/tags/summary/"/>
    
      <category term="kg" scheme="http://frankchu0229.github.io/tags/kg/"/>
    
  </entry>
  
  <entry>
    <title>TF Python Train And Java Serve</title>
    <link href="http://frankchu0229.github.io/2018/08/02/tf-python-train-java-serve/"/>
    <id>http://frankchu0229.github.io/2018/08/02/tf-python-train-java-serve/</id>
    <published>2018-08-02T02:30:59.000Z</published>
    <updated>2018-09-02T03:03:08.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-Model"><a href="#Python-Model" class="headerlink" title="Python Model"></a>Python Model</h2><p>Convert model to frozen graph with tf, frozen graph cannot be trained again and usually used in production environment.</p><h3 id="1-TF-Add-Name-For-Each-Placeholder"><a href="#1-TF-Add-Name-For-Each-Placeholder" class="headerlink" title="1. TF: Add Name For Each Placeholder"></a>1. TF: Add Name For Each Placeholder</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">in_question = tf.placeholder(tf.int32, [None, None], name=&apos;in_question&apos;)  # shape: (batch x seq)</div><div class="line">in_answer = tf.placeholder(tf.int32, [None, None], name=&apos;in_answer&apos;)</div><div class="line">in_question_len = tf.placeholder(tf.int32, [None], name=&apos;in_question_len&apos;)</div><div class="line">in_answer_len = tf.placeholder(tf.int32, [None], name=&apos;in_answer_len&apos;)</div><div class="line">dropout_rate = tf.placeholder(tf.float32, None, name=&apos;dropout_rate&apos;)</div><div class="line">y_prob = tf.nn.softmax(logits, name=&apos;y_pred&apos;)</div></pre></td></tr></table></figure><h3 id="2-Train-and-Save-the-Model-with-SavedModelBuilder"><a href="#2-Train-and-Save-the-Model-with-SavedModelBuilder" class="headerlink" title="2. Train and Save the Model with SavedModelBuilder"></a>2. Train and Save the Model with SavedModelBuilder</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">builder = tf.saved_model.builder.SavedModelBuilder(saved_model_dir)</div><div class="line"># x 为输入tensor, keep_prob为dropout的prob tensor</div><div class="line">inputs = &#123;&apos;in_question&apos;: tf.saved_model.utils.build_tensor_info(self.in_question),</div><div class="line">          &apos;in_answer&apos;: tf.saved_model.utils.build_tensor_info(self.in_answer),</div><div class="line">          &apos;in_question_len&apos;: tf.saved_model.utils.build_tensor_info(self.in_question_len),</div><div class="line">          &apos;in_answer_len&apos;: tf.saved_model.utils.build_tensor_info(self.in_answer_len),</div><div class="line">          &apos;in_y&apos;: tf.saved_model.utils.build_tensor_info(self.in_y),</div><div class="line">          &apos;learning_rate&apos;: tf.saved_model.utils.build_tensor_info(self.learning_rate),</div><div class="line">          &apos;dropout_rate&apos;: tf.saved_model.utils.build_tensor_info(self.dropout_rate)&#125;</div><div class="line"></div><div class="line">outputs = &#123;&apos;y_p&apos;: tf.saved_model.utils.build_tensor_info(self.y_p)&#125;</div><div class="line"></div><div class="line">signature = tf.saved_model.signature_def_utils.build_signature_def(inputs, outputs, &apos;test_sig_name&apos;)</div><div class="line"></div><div class="line">builder.add_meta_graph_and_variables(sess, [&apos;baidu-model&apos;], &#123;&apos;signature&apos;: signature&#125;)</div><div class="line">builder.save()</div></pre></td></tr></table></figure><h3 id="3-Choose-the-best-model-and-convert-it-to-frozen-graph"><a href="#3-Choose-the-best-model-and-convert-it-to-frozen-graph" class="headerlink" title="3. Choose the best model and convert it to frozen graph."></a>3. Choose the best model and convert it to frozen graph.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">def convert_to_frozen_graph(path, tags, output_node_names, frozen_path=&apos;./&apos;,</div><div class="line">                            frozen_graph_name=&apos;model.pb&apos;):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    To convert a saved model to a frozen graph. A saved model can be trained,</div><div class="line">    however, a frozen graph cannot be trained again. The model used by java</div><div class="line">    applications is a frozen graph.</div><div class="line">    :param path: saved model path</div><div class="line">    :param tags: saved model tags, set of string tags to identify the</div><div class="line">    required MetaGraphDef.</div><div class="line">    :param output_node_names: List of name strings for the result nodes</div><div class="line">    of the graph.</div><div class="line">    :param frozen_path: frozen graph save path</div><div class="line">    :param frozen_graph_name: frozen graph model name</div><div class="line">    :return: a frozen graph</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    with tf.Session(graph=tf.Graph()) as sess:</div><div class="line">        meta_graph_def = tf.saved_model.loader.load(sess, tags, path)</div><div class="line">        constant_graph = graph_util.convert_variables_to_constants(sess,</div><div class="line">                                                                   sess.graph.as_graph_def(),</div><div class="line">                                                                   output_node_names)</div><div class="line"></div><div class="line">        with tf.gfile.GFile(frozen_path + frozen_graph_name, &apos;wb&apos;) as fw:</div><div class="line">            fw.write(constant_graph.SerializeToString())</div><div class="line">        print(&quot;%d ops in the final graph.&quot; % len(constant_graph.node))</div><div class="line"></div><div class="line"></div><div class="line">def load_frozen_graph(path=&apos;./model.pb&apos;):</div><div class="line">    with tf.gfile.GFile(path, &quot;rb&quot;) as f:</div><div class="line">        graph_def = tf.GraphDef()</div><div class="line">        graph_def.ParseFromString(f.read())</div><div class="line"></div><div class="line">    # We load the graph_def in the default graph</div><div class="line">    with tf.Graph().as_default() as graph:</div><div class="line">        tf.import_graph_def(</div><div class="line">            graph_def,</div><div class="line">            input_map=None,</div><div class="line">            return_elements=None,</div><div class="line">            name=&quot;prefix&quot;,</div><div class="line">            op_dict=None,</div><div class="line">            producer_op_list=None</div><div class="line">        )</div><div class="line">    return graph</div></pre></td></tr></table></figure><h3 id="4-Test-the-frozen-graph"><a href="#4-Test-the-frozen-graph" class="headerlink" title="4. Test the frozen graph"></a>4. Test the frozen graph</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    convert_to_frozen_graph(&apos;../model/x.model&apos;, [&apos;x-model&apos;], [&apos;y_pred&apos;])</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">from .utils import load_frozen_graph</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    graph = load_frozen_graph()</div><div class="line">    for op in graph.get_operations():</div><div class="line">        print(op.name, op.values())</div><div class="line"></div><div class="line">    in_question = graph.get_tensor_by_name(&apos;prefix/in_question:0&apos;)</div><div class="line">    in_question_len = graph.get_tensor_by_name(&apos;prefix/in_question_len:0&apos;)</div><div class="line">    in_answer = graph.get_tensor_by_name(&apos;prefix/in_answer:0&apos;)</div><div class="line">    in_answer_len = graph.get_tensor_by_name(&apos;prefix/in_answer_len:0&apos;)</div><div class="line">    dropout_rate = graph.get_tensor_by_name(&apos;prefix/dropout_rate:0&apos;)</div><div class="line">    y_pred = graph.get_tensor_by_name(&apos;prefix/y_pred:0&apos;)</div><div class="line"></div><div class="line">    with tf.Session(graph=graph) as sess:</div><div class="line">        res = sess.run(y_pred,</div><div class="line">                       feed_dict=&#123;</div><div class="line">                           in_question: [</div><div class="line">                               [1935, 1198, 764, 657, 627, 456, 3114, 2964,</div><div class="line">                                137, 2702, 1933, 2003, 634, 137, 643, 3021,</div><div class="line">                                2003, 634, 137, 3177, 967, 2003, 2964, 137,</div><div class="line">                                2729, 240, 2003, 2139, 873, 0, 0, 0, 0, 0, 0]],</div><div class="line">                           in_answer: [</div><div class="line">                               [2300, 2236, 1733, 1206, 2003, 2702, 1933, 456,</div><div class="line">                                3114, 2003, 851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,</div><div class="line">                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],</div><div class="line">                           in_question_len: [29],</div><div class="line">                           in_answer_len: [11],</div><div class="line">                           dropout_rate: 0</div><div class="line">                       &#125;)</div><div class="line">    print(res)</div></pre></td></tr></table></figure><h2 id="Java-Serve"><a href="#Java-Serve" class="headerlink" title="Java Serve"></a>Java Serve</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">inQuestion = &quot;in_question&quot;;</div><div class="line">inQuestionLen = &quot;in_question_len&quot;;</div><div class="line">inAnswer = &quot;in_answer&quot;;</div><div class="line">inAnswerLen = &quot;in_answer_len&quot;;</div><div class="line">dropoutRate = &quot;dropout_rate&quot;;</div><div class="line">predictSim = &quot;y_pred&quot;;</div><div class="line"></div><div class="line">List&lt;Tensor&lt;?&gt;&gt; res = this.session.runner()</div><div class="line">    .feed(inQuestion, left.get(0)) // left, right are tensors created by tf</div><div class="line">    .feed(inQuestionLen, left.get(1))</div><div class="line">    .feed(inAnswer, right.get(0))</div><div class="line">    .feed(inAnswerLen, right.get(1))</div><div class="line">    .feed(dropoutRate, Tensor.create(0f))</div><div class="line">    .fetch(predictSim)</div><div class="line">    .run();</div><div class="line">res.get(0).copyTo(result);</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.google.com/presentation/d/e/2PACX-1vQ6DzxNTBrJo7K5P8t5_rBRGnyJoPUPBVOJR4ooHCwi4TlBFnIriFmI719rDNpcQzojqsV58aUqmBBx/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.g306175dd89_0_0" target="_blank" rel="external">https://docs.google.com/presentation/d/e/2PACX-1vQ6DzxNTBrJo7K5P8t5_rBRGnyJoPUPBVOJR4ooHCwi4TlBFnIriFmI719rDNpcQzojqsV58aUqmBBx/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.g306175dd89_0_0</a></li><li><a href="https://blog.metaflow.fr/tensorflow-how-to-freeze-a-model-and-serve-it-with-a-python-api-d4f3596b3adc" target="_blank" rel="external">https://blog.metaflow.fr/tensorflow-how-to-freeze-a-model-and-serve-it-with-a-python-api-d4f3596b3adc</a></li><li><a href="https://www.tensorflow.org/" target="_blank" rel="external">https://www.tensorflow.org/</a></li></ul>]]></content>
    
    <summary type="html">
    
      Summary for python offline train and java online serve using keras and tensorflow.
    
    </summary>
    
      <category term="Machine Learning" scheme="http://frankchu0229.github.io/categories/Machine-Learning/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="keras" scheme="http://frankchu0229.github.io/tags/keras/"/>
    
      <category term="dl" scheme="http://frankchu0229.github.io/tags/dl/"/>
    
      <category term="tensorflow" scheme="http://frankchu0229.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Python Cookbook Number Summary</title>
    <link href="http://frankchu0229.github.io/2018/07/14/python-cookbook-number/"/>
    <id>http://frankchu0229.github.io/2018/07/14/python-cookbook-number/</id>
    <published>2018-07-14T08:59:10.000Z</published>
    <updated>2018-07-14T10:08:27.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字的四舍五入-round"><a href="#数字的四舍五入-round" class="headerlink" title="数字的四舍五入 round"></a>数字的四舍五入 round</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">print(round(1.23, 1)) ## ndigits, 保留小数的位数</div><div class="line">print(round(-1.27, 1))</div><div class="line">print(round(1.55, 1))</div><div class="line">print(round(1.5))</div><div class="line">print(round(-1.5))</div><div class="line"></div><div class="line">### round ndigits为负数</div><div class="line"></div><div class="line">print(round(16323232, -1)) ## 只做舍入操作，在相应的十位、百位等上</div><div class="line">print(round(23233232, -2))</div></pre></td></tr></table></figure><h2 id="精确浮点数计算"><a href="#精确浮点数计算" class="headerlink" title="精确浮点数计算"></a>精确浮点数计算</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">a = 4.2</div><div class="line">b = 2.1</div><div class="line">print(a + b)</div><div class="line">print((a + b) == 6.3)</div><div class="line"></div><div class="line">from decimal import Decimal, localcontext</div><div class="line">a = Decimal(&apos;1.3&apos;)</div><div class="line">b = Decimal(&apos;1.7&apos;)</div><div class="line">print(a + b)</div><div class="line">print(a / b)</div><div class="line"></div><div class="line">with localcontext() as ctx:</div><div class="line">    ctx.prec = 3</div><div class="line">    print(a/b)</div><div class="line"></div><div class="line">## 在正常的科学计算中，可以使用python的标准库进行计算，速度快，误差基本可以忽略，但是有的时候还是要注意误差，以及注意数学运算的使用， 比如：</div><div class="line"></div><div class="line"></div><div class="line">num = [1.2e+18, 1, -1.2e+18]</div><div class="line">print(sum(num))</div><div class="line">import math</div><div class="line">print(math.fsum(num))</div></pre></td></tr></table></figure><h2 id="Number-Format"><a href="#Number-Format" class="headerlink" title="Number Format"></a>Number Format</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">a = 1234.56789</div><div class="line">format(a, &apos;.2f&apos;) ## 用round方式进行四舍五入</div><div class="line">format(a, &apos;&lt;10.2f&apos;)</div><div class="line">format(a, &apos;&gt;10.2f&apos;)</div><div class="line">format(a, &apos;^10.2f&apos;)</div><div class="line">format(a, &apos;,&apos;)</div><div class="line">format(a, &apos;0,.1f&apos;)</div><div class="line"></div><div class="line">### exp format</div><div class="line"></div><div class="line">format(a, &apos;e&apos;)</div><div class="line">format(a, &apos;0.2e&apos;)</div><div class="line"></div><div class="line">### format digit in a string</div><div class="line"></div><div class="line">&apos;The value is &#123;:10,.1f&#125;&apos;.format(a)</div><div class="line"></div><div class="line">### In all, width + digits: `[&lt;&gt;^]?width[,]?(.digits)?[ef]?`</div><div class="line">print(format(a, &apos;.2&apos;))</div></pre></td></tr></table></figure><h2 id="不同进制"><a href="#不同进制" class="headerlink" title="不同进制"></a>不同进制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">a = 1234</div><div class="line">bin(a)</div><div class="line">format(a, &apos;b&apos;) ## Starts with &apos;0b&apos;</div><div class="line"></div><div class="line">oct(a)</div><div class="line">format(a, &apos;o&apos;) ## Starts with &apos;0o&apos;</div><div class="line"></div><div class="line">hex(a)</div><div class="line">format(a, &apos;x&apos;) ## Starts with &apos;0h&apos;</div><div class="line"></div><div class="line">int(&apos;4d2&apos;, 16)</div><div class="line">int(&apos;10101010101&apos;, 2)</div></pre></td></tr></table></figure><h2 id="字节字符串与大整数的打包与解包"><a href="#字节字符串与大整数的打包与解包" class="headerlink" title="字节字符串与大整数的打包与解包"></a>字节字符串与大整数的打包与解包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">data = b&apos;\x00\x124V\x00x\x90\xab\x00\xcd\xef\x01\x00#\x004&apos;</div><div class="line">print(int.from_bytes(data, &apos;little&apos;))</div><div class="line">print(int.from_bytes(data, &apos;big&apos;))</div><div class="line"></div><div class="line">x = 94522842520747284487117727783387188</div><div class="line">print(x.to_bytes(16, &apos;little&apos;))</div><div class="line">print(x.to_bytes(16, &apos;big&apos;))</div></pre></td></tr></table></figure><h2 id="复数的数学运算"><a href="#复数的数学运算" class="headerlink" title="复数的数学运算"></a>复数的数学运算</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">### 复数表示</div><div class="line">import math</div><div class="line">import cmath ## python 标准库不支持复数的运算</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">a = 3 + 5j</div><div class="line">b = complex(3, 5)</div><div class="line">print(a, b)</div><div class="line">print(a.real, a.imag, a.conjugate)</div><div class="line">print(b.real, b.imag, b.conjugate)</div><div class="line">math.sin(3)</div><div class="line">print(cmath.sin(a))</div><div class="line"></div><div class="line"># print(math.sqrt(-1))</div><div class="line">print(cmath.sqrt(-1))</div><div class="line"></div><div class="line">array = np.array([1 + 2j, 2 + 3j])</div><div class="line">print(np.sum(array + 2))</div></pre></td></tr></table></figure><h2 id="Nan-inf"><a href="#Nan-inf" class="headerlink" title="Nan, inf"></a>Nan, inf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">a = float(&apos;nan&apos;)</div><div class="line">d = float(&apos;nan&apos;)</div><div class="line"></div><div class="line">print(a == d)</div><div class="line">b = float(&apos;inf&apos;)</div><div class="line">c = float(&apos;-inf&apos;)</div><div class="line"></div><div class="line">import math</div><div class="line">print(math.isinf(b))</div><div class="line">print(math.isinf(c))</div><div class="line">print(math.isnan(a))</div></pre></td></tr></table></figure><h2 id="分数运算"><a href="#分数运算" class="headerlink" title="分数运算"></a>分数运算</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">from fractions import  Fraction</div><div class="line">a = Fraction(3, 4)</div><div class="line">b = Fraction(4, 5)</div><div class="line">c = a + b</div><div class="line">print(c)</div><div class="line">print(c.numerator, c.denominator)</div><div class="line"></div><div class="line">print(float(c))</div><div class="line">d = 3.75</div><div class="line">print(d.as_integer_ratio())</div><div class="line">num, den = d.as_integer_ratio()</div><div class="line">print(Fraction(*d.as_integer_ratio()))</div><div class="line">print(Fraction(num, den))</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p11_naming_slice.html" target="_blank" rel="external">Python Cookbook</a></li></ul>]]></content>
    
    <summary type="html">
    
      Python Cookbook Digit Summary.
    
    </summary>
    
      <category term="python" scheme="http://frankchu0229.github.io/categories/python/"/>
    
    
      <category term="notes" scheme="http://frankchu0229.github.io/tags/notes/"/>
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="coding" scheme="http://frankchu0229.github.io/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>sequence-prediction-summary</title>
    <link href="http://frankchu0229.github.io/2018/07/02/sequence-prediction-summary/"/>
    <id>http://frankchu0229.github.io/2018/07/02/sequence-prediction-summary/</id>
    <published>2018-07-02T05:17:19.000Z</published>
    <updated>2018-07-02T05:17:19.186Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tf-demo</title>
    <link href="http://frankchu0229.github.io/2018/07/02/tf-demo/"/>
    <id>http://frankchu0229.github.io/2018/07/02/tf-demo/</id>
    <published>2018-07-02T05:16:43.000Z</published>
    <updated>2018-07-02T05:16:43.247Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Keras Embedding Summary</title>
    <link href="http://frankchu0229.github.io/2018/06/28/keras-embedding/"/>
    <id>http://frankchu0229.github.io/2018/06/28/keras-embedding/</id>
    <published>2018-06-28T08:42:08.000Z</published>
    <updated>2018-06-28T11:08:51.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line">from keras.preprocessing.text import text_to_word_sequence, hashing_trick</div><div class="line">query = &apos;W17378 W09158 W03746 W03390&apos;</div><div class="line">print(text_to_word_sequence(query))</div><div class="line">## [&apos;w17378&apos;, &apos;w09158&apos;, &apos;w03746&apos;, &apos;w03390&apos;]</div><div class="line"></div><div class="line">print(hashing_trick(query, 50))</div><div class="line">## [23, 19, 32, 12]</div><div class="line">print(hashing_trick(query, 20891, hash_function=lambda x: int(re.sub(&apos;W|w&apos;, &apos;&apos;, x))))</div><div class="line">## [17379, 9159, 3747, 3391]</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">from numpy import array</div><div class="line">from keras.preprocessing.text import one_hot</div><div class="line">from keras.preprocessing.sequence import pad_sequences</div><div class="line"># define documents</div><div class="line">docs = [&apos;Well done!&apos;,</div><div class="line">&apos;Good work&apos;,</div><div class="line">&apos;Great effort&apos;,</div><div class="line">&apos;nice work&apos;,</div><div class="line">&apos;Excellent!&apos;,</div><div class="line">&apos;Weak&apos;,</div><div class="line">&apos;Poor effort!&apos;,</div><div class="line">&apos;not good&apos;,</div><div class="line">&apos;poor work&apos;,</div><div class="line">&apos;Could have done better.&apos;]</div><div class="line"># define class labels</div><div class="line">labels = array([1,1,1,1,1,0,0,0,0,0])</div><div class="line"></div><div class="line">vocab_size = 50</div><div class="line">encoded_docs = [one_hot(d, vocab_size) for d in docs]</div><div class="line">print(encoded_docs)</div><div class="line">## [[7, 6], [8, 5], [36, 17], [10, 5], [5], [7], [39, 17], [11, 8], [39, 5], [20, 37, 6, 22]]</div><div class="line"></div><div class="line">max_length = 4</div><div class="line">padded_docs = pad_sequences(encoded_docs, maxlen=max_length, padding=&apos;post&apos;)</div><div class="line">print(padded_docs)</div><div class="line"></div><div class="line">## [[ 7  6  0  0]</div><div class="line">##  [ 8  5  0  0]</div><div class="line">##  [36 17  0  0]</div><div class="line">##  [10  5  0  0]</div><div class="line">##  [ 5  0  0  0]</div><div class="line">##  [ 7  0  0  0]</div><div class="line">##  [39 17  0  0]</div><div class="line">##  [11  8  0  0]</div><div class="line">##  [39  5  0  0]</div><div class="line">##  [20 37  6 22]]</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">## Use pre-trained embeddings</div><div class="line">from numpy import asarray, zeros</div><div class="line">from keras.preprocessing.text import Tokenizer</div><div class="line">from keras.preprocessing.sequence import pad_sequences</div><div class="line"># define documents</div><div class="line">docs = [&apos;Well done!&apos;,</div><div class="line">&apos;Good work&apos;,</div><div class="line">&apos;Great effort&apos;,</div><div class="line">&apos;nice work&apos;,</div><div class="line">&apos;Excellent!&apos;,</div><div class="line">&apos;Weak&apos;,</div><div class="line">&apos;Poor effort!&apos;,</div><div class="line">&apos;not good&apos;,</div><div class="line">&apos;poor work&apos;,</div><div class="line">&apos;Could have done better.&apos;]</div><div class="line"># define class labels</div><div class="line">labels = array([1,1,1,1,1,0,0,0,0,0])</div><div class="line">t = Tokenizer()</div><div class="line">t.fit_on_texts(docs)</div><div class="line">print(t)</div><div class="line">vocab_size = len(t.word_index) + 1</div><div class="line">encoded_docs = t.texts_to_sequences(docs)</div><div class="line">print(encoded_docs)</div><div class="line">max_length = 4</div><div class="line">padded_docs = pad_sequences(encoded_docs, maxlen=max_length, padding=&apos;post&apos;)</div><div class="line">print(padded_docs)</div><div class="line">print(t.word_index)</div><div class="line"></div><div class="line">## loading the whold embedding into matrix</div><div class="line">embeddings_index = dict()</div><div class="line">embeddings_index[&apos;Well&apos;] = asarray([1.04661322, -0.86488587, -0.32734334], dtype=&apos;float32&apos;)</div><div class="line">embeddings_index[&apos;done&apos;] = asarray([1.04661322, -0.86488587, 0.32734334], dtype=&apos;float32&apos;)</div><div class="line">print(embeddings_index)</div><div class="line">## embedding matrix:</div><div class="line"></div><div class="line">embedding_matrix = zeros((vocab_size, 3))</div><div class="line">for word, i in t.word_index.items():</div><div class="line">    embeddings_vector = embeddings_index.get(word)</div><div class="line">    if embeddings_vector is not None:</div><div class="line">        embedding_matrix[i] = embeddings_vector</div><div class="line">print(embedding_matrix)</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://blog.keras.io/using-pre-trained-word-embeddings-in-a-keras-model.html" target="_blank" rel="external">keras blog</a></li><li><a href="https://machinelearningmastery.com/use-word-embedding-layers-deep-learning-keras/" target="_blank" rel="external">https://machinelearningmastery.com/use-word-embedding-layers-deep-learning-keras/</a></li></ul>]]></content>
    
    <summary type="html">
    
      Keras preprocessing usage summary and loading pretrained word embeddings summary
    
    </summary>
    
      <category term="Machine Learning" scheme="http://frankchu0229.github.io/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://frankchu0229.github.io/tags/Machine-Learning/"/>
    
      <category term="keras" scheme="http://frankchu0229.github.io/tags/keras/"/>
    
      <category term="dl" scheme="http://frankchu0229.github.io/tags/dl/"/>
    
      <category term="nlp" scheme="http://frankchu0229.github.io/tags/nlp/"/>
    
  </entry>
  
  <entry>
    <title>Representation in NLP</title>
    <link href="http://frankchu0229.github.io/2018/06/23/rl/"/>
    <id>http://frankchu0229.github.io/2018/06/23/rl/</id>
    <published>2018-06-23T03:10:49.000Z</published>
    <updated>2018-06-28T11:11:01.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/pinard/p/7243513.html#!comments" target="_blank" rel="external">刘建平Pinard</a></li><li><a href="https://mp.weixin.qq.com/s/B_hnpOp_AVsIoL8gbkL4Hw" target="_blank" rel="external">美团技术博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      Representation in NLP Summary.
    
    </summary>
    
      <category term="Machine Learning" scheme="http://frankchu0229.github.io/categories/Machine-Learning/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="keras" scheme="http://frankchu0229.github.io/tags/keras/"/>
    
      <category term="dl" scheme="http://frankchu0229.github.io/tags/dl/"/>
    
  </entry>
  
  <entry>
    <title>Keras Classification</title>
    <link href="http://frankchu0229.github.io/2018/06/20/keras-classification/"/>
    <id>http://frankchu0229.github.io/2018/06/20/keras-classification/</id>
    <published>2018-06-20T11:27:18.000Z</published>
    <updated>2018-06-20T13:38:41.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line"></div><div class="line">from keras.datasets import mnist</div><div class="line">from keras.utils import np_utils</div><div class="line">from keras.models import Sequential</div><div class="line">from keras.optimizers import RMSprop</div><div class="line">from keras.layers import Dense, Activation</div><div class="line">from keras.models import load_model</div><div class="line"></div><div class="line"></div><div class="line">def create_dataset():</div><div class="line">    (train_X, train_Y), (test_X, test_Y) = mnist.load_data()</div><div class="line">    train_X = train_X.reshape(train_X.shape[0], -1) / 255  ## -1: 自动推断出维度</div><div class="line">    test_X = test_X.reshape(test_X.shape[0], -1) / 255</div><div class="line">    train_Y = np_utils.to_categorical(train_Y, num_classes=10)</div><div class="line">    test_Y = np_utils.to_categorical(test_Y, num_classes=10)</div><div class="line">    print(train_X[0].shape)</div><div class="line">    print(train_Y[:3])</div><div class="line">    return train_X, train_Y, test_X, test_Y</div><div class="line"></div><div class="line"></div><div class="line">def build_model():</div><div class="line">    model = Sequential()</div><div class="line">    model.add(Dense(32, input_shape=(784,)))</div><div class="line">    model.add(Activation(&apos;relu&apos;))</div><div class="line">    model.add(Dense(10))</div><div class="line">    model.add(Activation(&apos;softmax&apos;))</div><div class="line">    rmsprop = RMSprop()  # can set learning rate 等参数值</div><div class="line">    model.compile(optimizer=rmsprop, loss=&apos;categorical_crossentropy&apos;,</div><div class="line">                  metrics=[&apos;accuracy&apos;])</div><div class="line">    return model</div><div class="line"></div><div class="line"></div><div class="line">def train_test():</div><div class="line">    print(&quot;------Training------&quot;)</div><div class="line">    model = build_model()</div><div class="line">    train_X, train_Y, test_X, test_Y = create_dataset()</div><div class="line">    model.fit(train_X, train_Y, epochs=10, batch_size=32)</div><div class="line">    loss, acc = model.evaluate(test_X, test_Y, batch_size=32)</div><div class="line">    print(&quot;Test loss &#123;&#125; and acc &#123;&#125;&quot;.format(loss, acc))</div><div class="line">    model.save(&apos;./classification.model&apos;)</div><div class="line"></div><div class="line"></div><div class="line">def predict():</div><div class="line">    model = load_model(&apos;./classification.model&apos;)</div><div class="line">    train_X, train_Y, test_X, test_Y = create_dataset()</div><div class="line">    pred_y = model.predict(test_X)</div><div class="line">    print(pred_y)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    predict()</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://keras.io/zh/getting-started/sequential-model-guide/" target="_blank" rel="external">keras manual</a></li><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/keras/2-2-classifier/" target="_blank" rel="external">mofan keras tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      Keras Classification.
    
    </summary>
    
      <category term="Machine Learning" scheme="http://frankchu0229.github.io/categories/Machine-Learning/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="keras" scheme="http://frankchu0229.github.io/tags/keras/"/>
    
      <category term="dl" scheme="http://frankchu0229.github.io/tags/dl/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib Summary</title>
    <link href="http://frankchu0229.github.io/2018/06/20/matplotlib/"/>
    <id>http://frankchu0229.github.io/2018/06/20/matplotlib/</id>
    <published>2018-06-20T02:27:36.000Z</published>
    <updated>2018-09-27T07:01:18.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Matplotlib-Basic-Operations-in-Jupyter"><a href="#Matplotlib-Basic-Operations-in-Jupyter" class="headerlink" title="Matplotlib Basic Operations in Jupyter"></a>Matplotlib Basic Operations in Jupyter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line">%matplotlib inline</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">x = np.linspace(-1, 1, 50)</div><div class="line">y = 2 * x + 1</div><div class="line">plt.plot(x, y)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">x = np.linspace(-1, 1, 50)</div><div class="line">y1 = 2 * x + 1</div><div class="line">y2 = 2 ** x + 1</div><div class="line">plt.plot(x, y1)</div><div class="line">plt.plot(x, y2, color=&apos;red&apos;, linestyle=&apos;--&apos;)</div><div class="line">plt.xlabel(&apos;X axis&apos;)</div><div class="line">plt.ylabel(&apos;Y axis&apos;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://blog.csdn.net/Notzuonotdied/article/details/77876080" target="_blank" rel="external">reference</a></li></ul>]]></content>
    
    <summary type="html">
    
      Matplotlib Summary.
    
    </summary>
    
      <category term="Machine Learning" scheme="http://frankchu0229.github.io/categories/Machine-Learning/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="tools" scheme="http://frankchu0229.github.io/tags/tools/"/>
    
      <category term="matplotlib" scheme="http://frankchu0229.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy Summary</title>
    <link href="http://frankchu0229.github.io/2018/06/08/scrapy-summary/"/>
    <id>http://frankchu0229.github.io/2018/06/08/scrapy-summary/</id>
    <published>2018-06-08T06:52:20.000Z</published>
    <updated>2018-06-08T13:42:03.776Z</updated>
    
    <summary type="html">
    
      Scrapy Summary.
    
    </summary>
    
      <category term="spider" scheme="http://frankchu0229.github.io/categories/spider/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="spider" scheme="http://frankchu0229.github.io/tags/spider/"/>
    
      <category term="scrapy" scheme="http://frankchu0229.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Beautiful Soup Summary</title>
    <link href="http://frankchu0229.github.io/2018/06/08/beautifulsoup-summary/"/>
    <id>http://frankchu0229.github.io/2018/06/08/beautifulsoup-summary/</id>
    <published>2018-06-08T06:52:12.000Z</published>
    <updated>2018-07-18T03:33:02.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Four-Python-Object-Type"><a href="#Four-Python-Object-Type" class="headerlink" title="Four Python Object Type:"></a>Four Python Object Type:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">from bs4 import BeautifulSoup</div><div class="line">import lxml</div><div class="line"></div><div class="line">html = &quot;&quot;&quot;</div><div class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</div><div class="line">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</div><div class="line">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</div><div class="line">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</div><div class="line">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</div><div class="line">and they lived at the bottom of a well.&lt;/p&gt;</div><div class="line">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</div><div class="line">&quot;&quot;&quot;</div><div class="line"></div><div class="line">soup = BeautifulSoup(html, &apos;lxml&apos;) ## will parse the html into a tree structure, and each node is a python object, and the python object can be categorized into the following four type:</div><div class="line"># print(soup.prettify())</div><div class="line"></div><div class="line">## Tags: name and attrs</div><div class="line">print(&apos;html is:&apos;, soup.html)</div><div class="line">print(&apos;head is: &apos;, soup.head)</div><div class="line">print(&apos;title is: &apos;, soup.title)</div><div class="line">print(&apos;p is:&apos;, soup.p) ## the first tag</div><div class="line">print(&apos;a is:&apos;, soup.a) ## the first tag</div><div class="line">print(&apos;Type is:&apos;, type(soup.a))</div><div class="line"></div><div class="line">### Two fields in Tag: name and attribute.</div><div class="line">print(&apos;soup name&apos;, soup.name)</div><div class="line">print(&apos;p tag name&apos;, soup.p.name) ## name p</div><div class="line">print(&apos;p tag attributes&apos;, soup.p.attrs) ## attrs &#123;&apos;class&apos;: [&apos;title&apos;], &apos;name&apos;: &apos;dromouse&apos;&#125;</div><div class="line"></div><div class="line">print(&apos;html node name&apos;, soup.html.name)</div><div class="line">print(&apos;html node attrs&apos;, soup.html.attrs)</div><div class="line"></div><div class="line">print(&quot;Get attributes of p&quot;, soup.p[&apos;class&apos;])</div><div class="line">print(&quot;Get attributes of p&quot;, soup.p.get(&apos;class&apos;))</div><div class="line">soup.p[&apos;class&apos;] = [&apos;hihi&apos;]</div><div class="line">print(&quot;Get attributes of p after changing attrs&quot;, soup.p[&apos;class&apos;])</div><div class="line"></div><div class="line">## NavigableString: get the values in the tag</div><div class="line">print(&quot;Get the value in the tag&quot;, soup.p.string)</div><div class="line">print(&apos;Type of the value in the tag&apos;, type(soup.p.string))</div><div class="line"></div><div class="line">## BeautifulSoup Object: 表示一个文档的全部内容，可以当作一个Tag对象, root node?</div><div class="line">print(type(soup))</div><div class="line">print(soup.name)</div><div class="line">print(soup.attrs)</div><div class="line"></div><div class="line">## Comment: 本质还是一个NavigableString, 可以使用.string 获得注释内容，但不会由注释符号</div><div class="line"></div><div class="line">print(soup.a)</div><div class="line">print(type(soup.a))</div><div class="line">print(soup.a.name)</div><div class="line">print(soup.a.string)</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://cuiqingcai.com/1319.html" target="_blank" rel="external">reference</a></li></ul>]]></content>
    
    <summary type="html">
    
      Beautiful Soup Summary.
    
    </summary>
    
      <category term="spider" scheme="http://frankchu0229.github.io/categories/spider/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="beautiful-soup" scheme="http://frankchu0229.github.io/tags/beautiful-soup/"/>
    
      <category term="spider" scheme="http://frankchu0229.github.io/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>Pandas Summary</title>
    <link href="http://frankchu0229.github.io/2018/06/06/pandas-summary/"/>
    <id>http://frankchu0229.github.io/2018/06/06/pandas-summary/</id>
    <published>2018-06-06T09:42:45.000Z</published>
    <updated>2018-06-08T13:41:20.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pandas-Demo"><a href="#Pandas-Demo" class="headerlink" title="Pandas Demo"></a>Pandas Demo</h2><p>Pandas 是基于numpy构建的，如果用python中的list和dict来做比较，numpy可以看作是list， pandas为dict。</p><h2 id="Pandas-Basic"><a href="#Pandas-Basic" class="headerlink" title="Pandas Basic"></a>Pandas Basic</h2><h3 id="Series-and-DataFrame"><a href="#Series-and-DataFrame" class="headerlink" title="Series and DataFrame"></a>Series and DataFrame</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">series = pd.Series([0,1,2,3,4,np.nan], index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;])</div><div class="line">print(s)</div><div class="line">print(s[0])</div><div class="line"></div><div class="line">dates = pd.date_range(&apos;20180101&apos;, periods=6)</div><div class="line">print(dates)</div><div class="line">data_frame = pd.DataFrame(np.random.randn(6,4), index=dates, columns=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">print(data_frame)</div><div class="line">print(data_frame[&apos;b&apos;])</div><div class="line"></div><div class="line">df = pd.DataFrame(np.random.random((6,4)))</div><div class="line">print(df)</div><div class="line">print(df.dtypes)</div><div class="line"></div><div class="line"></div><div class="line">df1 = pd.DataFrame(</div><div class="line">    &#123;</div><div class="line">        &apos;a&apos;: 1.,</div><div class="line">        &apos;b&apos;: pd.Categorical([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]),</div><div class="line">        &apos;c&apos;: pd.Series(1, index=list(range(4))),</div><div class="line">        &apos;d&apos;: pd.Timestamp(&apos;20180101&apos;),</div><div class="line">        &apos;e&apos;: np.array([4]*4)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">)</div><div class="line">print(df1)</div><div class="line">print(df1.index)</div><div class="line">print(df1.columns)</div><div class="line">print(df1.values)</div><div class="line">print(df1.transpose)</div><div class="line"></div><div class="line">print(df1.sort_index(axis=1, ascending=False))</div><div class="line">print(df1.sort_values(by=&apos;b&apos;))</div></pre></td></tr></table></figure><h2 id="pandas-choose-data"><a href="#pandas-choose-data" class="headerlink" title="pandas choose data:"></a>pandas choose data:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">dates = pd.date_range(&apos;20180101&apos;, periods=6)</div><div class="line">df = pd.DataFrame(np.random.random((6,4)), index=dates, columns=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">print(df)</div><div class="line"></div><div class="line">## 多行多列</div><div class="line">print(df[&apos;a&apos;])</div><div class="line">print(df.a)</div><div class="line"></div><div class="line">print(df[0:2])</div><div class="line">print(df[&apos;2018-01-02&apos;: &apos;2018-01-03&apos;])</div><div class="line"></div><div class="line">## 使用loc iloc 和ix</div><div class="line">## loc use index name</div><div class="line">print(&apos;df loc values&apos;, df.loc[&apos;2018-01-02&apos;])</div><div class="line">print(&apos;df loc values&apos;, df.loc[&apos;2018-01-02&apos;, &apos;a&apos;])</div><div class="line">print(&apos;df loc values&apos;, df.loc[:,[&apos;a&apos;,&apos;b&apos;]])</div><div class="line"></div><div class="line">## iloc use index:0,1,2,3</div><div class="line">print(&apos;df iloc values&apos;, df.iloc[0,1])</div><div class="line">print(&apos;df iloc values&apos;, df.iloc[0])</div><div class="line">print(&apos;df iloc values&apos;, df.iloc[0, 1:3])</div><div class="line">print(&apos;df iloc values&apos;, df.iloc[0:2, 1])</div><div class="line">print(&apos;df iloc values&apos;, df.iloc[0:2, 1:3])</div><div class="line">print(&apos;df iloc values&apos;, df.iloc[[1,2,3], 1:3])</div><div class="line"></div><div class="line">print(&apos;df ix values:&apos;, df.ix[0:1, [&apos;a&apos;, &apos;d&apos;]])</div><div class="line"></div><div class="line">print(&apos;df comparision values are:&apos;, df[df.a &gt; df.b])</div></pre></td></tr></table></figure><h2 id="pandas-set-value"><a href="#pandas-set-value" class="headerlink" title="pandas set value"></a>pandas set value</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import pandas as pd</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">dates = pd.date_range(&apos;20180101&apos;, periods=6)</div><div class="line">df = pd.DataFrame(np.random.random((6,4)), index=dates, columns=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line"></div><div class="line">## 行列 loc iloc and</div><div class="line">print(df)</div><div class="line">df[&apos;a&apos;] = 0</div><div class="line">print(df)</div><div class="line"></div><div class="line">df.b = 0</div><div class="line">print(df)</div><div class="line"></div><div class="line">## 有: 时 才是对行操作</div><div class="line">df[&apos;2018-01-01&apos;: &apos;2018-01-02&apos;] = np.nan</div><div class="line">print(df)</div><div class="line"></div><div class="line">df.iloc[0,1] = np.nan</div><div class="line">print(df)</div><div class="line"></div><div class="line">df[&apos;e&apos;] = np.nan</div><div class="line">print(df)</div><div class="line"></div><div class="line">df.b[df.b &gt; -0.2] = 88</div><div class="line">print(df)</div><div class="line"></div><div class="line">## pandas nan process</div><div class="line">print(df.dropna(axis=0, how=&apos;any&apos;)) ## axis=0 row, axis = 1 column</div><div class="line">print(df.fillna(value=0))</div><div class="line">print(df.isnull())</div></pre></td></tr></table></figure><h2 id="pandas-read-and-write-file"><a href="#pandas-read-and-write-file" class="headerlink" title="pandas read and write file:"></a>pandas read and write file:</h2><p>pandas can read and write csv, json, excel, html, pickle etc.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line"></div><div class="line">pd.read_csv(&apos;student.csv&apos;)</div><div class="line">pd.read_excel(&apos;a.excel&apos;)</div><div class="line"></div><div class="line">##</div><div class="line">pd.to_pickle(&apos;student.pickle&apos;)</div></pre></td></tr></table></figure></p><h2 id="Pandas-Concat"><a href="#Pandas-Concat" class="headerlink" title="Pandas Concat"></a>Pandas Concat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">df1 = pd.DataFrame(np.ones((3,4))*0, columns=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">df2 = pd.DataFrame(np.ones((3,4))*1, columns=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">df3 = pd.DataFrame(np.ones((3,4))*2, columns=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line"></div><div class="line">print(pd.concat([df1, df2, df3], axis=0)) # 0 在row上concat</div><div class="line">print(pd.concat([df1, df2, df3], axis=1)) # 1 在column上concat</div><div class="line">print(pd.concat([df1, df2, df3], axis=0, ignore_index=True)) # ignore index: reindex</div><div class="line"></div><div class="line">df4 = pd.DataFrame(np.ones((3,4))*2, columns=[ &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;])</div><div class="line"></div><div class="line">print(pd.concat([df1, df4], axis=0, join=&apos;outer&apos;))</div><div class="line">print(pd.concat([df1, df4], axis=0, join=&apos;inner&apos;))</div><div class="line"></div><div class="line">df5 = pd.DataFrame(np.ones((3,4))*2, columns=[ &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;], index=[2,3,4])</div><div class="line"></div><div class="line">print(pd.concat([df1, df5], axis=1))</div><div class="line"></div><div class="line">print(pd.concat([df1, df5], axis=1, join_axes=[df1.index]))</div><div class="line">print(pd.concat([df1, df5], axis=1, join_axes=[df5.index]))</div><div class="line"></div><div class="line">## append 只能在行级别增加，即纵向增加</div><div class="line"></div><div class="line">print(df1.append(df2))</div><div class="line">print(df1.append([df2, df3]))</div><div class="line">print(df1.append([df2, df3], ignore_index=True))</div></pre></td></tr></table></figure><h2 id="pandas-merge-合并有相同column的pandas-dataframe等"><a href="#pandas-merge-合并有相同column的pandas-dataframe等" class="headerlink" title="pandas merge: 合并有相同column的pandas dataframe等"></a>pandas merge: 合并有相同column的pandas dataframe等</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">a = pd.DataFrame(&#123;</div><div class="line">    &apos;a&apos;: [&apos;a0&apos;, &apos;a1&apos;, &apos;a2&apos;],</div><div class="line">    &apos;b&apos;: [&apos;b0&apos;, &apos;b1&apos;, &apos;b2&apos;]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">b = pd.DataFrame(&#123;</div><div class="line">    &apos;b&apos; : [&apos;b0&apos;, &apos;b1&apos;, &apos;b3&apos;]</div><div class="line">&#125;)</div><div class="line"></div><div class="line">print(pd.merge(a, b, on=&apos;b&apos;))</div><div class="line">print(pd.merge(a, b, on=&apos;b&apos;, how=&apos;outer&apos;))</div></pre></td></tr></table></figure><h2 id="Pandas-Plot"><a href="#Pandas-Plot" class="headerlink" title="Pandas Plot"></a>Pandas Plot</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div><div class="line"></div><div class="line">import pandas as pd</div><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"></div><div class="line">series = pd.Series(np.random.randn(1000))</div><div class="line">print(series)</div><div class="line">print(series.cumsum())</div><div class="line">series.plot()</div><div class="line">plt.show()</div><div class="line"></div><div class="line">df = pd.DataFrame(np.random.randn(1000,4), columns=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">df.plot()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/" target="_blank" rel="external">mofan-python-pandas-tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      Pandas Summary.
    
    </summary>
    
      <category term="Machine Learning" scheme="http://frankchu0229.github.io/categories/Machine-Learning/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="dl" scheme="http://frankchu0229.github.io/tags/dl/"/>
    
      <category term="pandas" scheme="http://frankchu0229.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>Numpy Summary</title>
    <link href="http://frankchu0229.github.io/2018/06/06/numpy-summary/"/>
    <id>http://frankchu0229.github.io/2018/06/06/numpy-summary/</id>
    <published>2018-06-06T09:42:23.000Z</published>
    <updated>2018-06-07T12:24:07.965Z</updated>
    
    <content type="html"><![CDATA[<p>Numpy 是一个高性能的多维数组计算库，常被用在科学计算中。</p><h2 id="Numpy-Fields-and-Basic-Operations"><a href="#Numpy-Fields-and-Basic-Operations" class="headerlink" title="Numpy Fields and Basic Operations"></a>Numpy Fields and Basic Operations</h2><p>Numpy basic fields: <code>ndim</code>, <code>size</code> and <code>shape</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">## Numpy basics: fields and matrix operation.</div><div class="line"></div><div class="line">import numpy as np</div><div class="line"></div><div class="line">array = np.array([[1,2,3], [4,5,6], [7,8,9]])</div><div class="line">a = np.array([1,2,3])</div><div class="line">print(a.ndim)</div><div class="line">print(array)</div><div class="line">print(array[0][2])</div><div class="line">print(&apos;dim is&apos;, array.ndim)</div><div class="line">print(&apos;shape is&apos;, array.shape)</div><div class="line">print(&apos;size is&apos;, array.size)</div><div class="line"></div><div class="line">## dtype </div><div class="line"></div><div class="line">dtype_array = np.array([1,2,3])</div><div class="line">print(dtype_array.dtype)</div><div class="line">dtype_array1 = np.array([1,2,3,4,5], dtype=np.float)</div><div class="line">print(dtype_array1.dtype)</div><div class="line"></div><div class="line">## matrix operation</div><div class="line"></div><div class="line">matrix_a = np.array([[1,2,3], [4,5,6]])</div><div class="line">print(matrix_a)</div><div class="line">matrix_zeros = np.zeros((2,3))</div><div class="line">print(matrix_zeros)</div><div class="line">matrix_ones = np.ones((2,3), dtype=int)</div><div class="line">print(matrix_ones)</div><div class="line">matrix_empty = np.empty((2,3)) ## create values that are close to zero.</div><div class="line">print(matrix_empty)</div><div class="line">matrix_arange = np.arange(1,50,2)</div><div class="line">print(matrix_arange)</div><div class="line">matrix_reshape = matrix_arange.reshape((5,5))</div><div class="line">print(matrix_reshape)</div><div class="line">## linspace: to create 20 elememts between 1 and 10 </div><div class="line">matrix_linspace = np.linspace(1,10,20)</div><div class="line">print(matrix_linspace)</div></pre></td></tr></table></figure><h2 id="Numpy-Array-Computation"><a href="#Numpy-Array-Computation" class="headerlink" title="Numpy Array Computation"></a>Numpy Array Computation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line"></div><div class="line">## numpy calculation:</div><div class="line"></div><div class="line">matrix_a = np.array([[1,2,3], [4,5,6], [7,8,9]])</div><div class="line">matrix_b = np.arange(10, 19).reshape((3,3))</div><div class="line"></div><div class="line">print(matrix_a)</div><div class="line">print(matrix_b)</div><div class="line">print(matrix_a + matrix_b)</div><div class="line">print(matrix_a - matrix_b)</div><div class="line">print(matrix_a * matrix_b) ## point-wise multiply.</div><div class="line">print(&quot;a*b for matrix multiply calculation is:&quot;, np.dot(matrix_a, matrix_b)) ## normal matrix multiply</div><div class="line">print(&quot;a*b for matrix multiply calculation is:&quot;, matrix_a.dot(matrix_b)) ## normal matrix multiply</div><div class="line">print(np.sin(matrix_a))</div><div class="line">print(matrix_b &lt; 15)</div><div class="line">print(matrix_b**2)</div><div class="line"></div><div class="line">matrix_random = np.random.random((3,4))</div><div class="line">print(matrix_random)</div><div class="line"></div><div class="line">## Operation over the whole matrix.</div><div class="line">print(np.sum(matrix_random))</div><div class="line">print(np.min(matrix_random))</div><div class="line">print(np.max(matrix_random))</div><div class="line"></div><div class="line">## Operation over the single row or column， 0 for column, 1 for row.</div><div class="line">print(&apos;row operation results:&apos;, np.max(matrix_random, axis=0))</div><div class="line">print(&apos;column operation results:&apos;, np.max(matrix_random, axis=1))</div><div class="line"></div><div class="line">## numpy mateix operation 2</div><div class="line"></div><div class="line">import numpy as np</div><div class="line"></div><div class="line">matrix = np.arange(12, 0, -1).reshape((3,4))</div><div class="line">print(matrix)</div><div class="line"></div><div class="line">print(matrix.argmax())</div><div class="line">print(matrix.argmin())</div><div class="line">print(np.argmax(matrix))</div><div class="line"></div><div class="line">print(matrix.mean())</div><div class="line">print(matrix.cumsum()) ## cumulutive sum</div><div class="line">print(np.diff(matrix)) ## 后一项减去前一项</div><div class="line"></div><div class="line">print(np.nonzero(matrix))</div><div class="line">print(matrix)</div><div class="line">print(np.sort(matrix, axis=0))</div><div class="line">print(np.sort(matrix, axis=1))</div><div class="line"></div><div class="line">print(matrix.T)</div><div class="line">print(np.transpose(matrix))</div><div class="line"></div><div class="line">print(np.clip(matrix, 5,9))</div></pre></td></tr></table></figure><h2 id="Numpy-索引"><a href="#Numpy-索引" class="headerlink" title="Numpy 索引"></a>Numpy 索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">## numpy 索引</div><div class="line"></div><div class="line">import numpy as np</div><div class="line"></div><div class="line">matrix = np.arange(12).reshape((3,4))</div><div class="line">print(matrix)</div><div class="line"></div><div class="line">print(matrix[0][1])</div><div class="line">print(matrix[0,1])</div><div class="line"></div><div class="line">print(matrix[0][1:3])</div><div class="line">print(matrix[0, 1:3])</div><div class="line"></div><div class="line">for row in matrix:</div><div class="line">    print(row)</div><div class="line">    </div><div class="line">for column in matrix.T:</div><div class="line">    print(column)</div><div class="line"></div><div class="line">print(matrix.flatten()) ## list</div><div class="line"></div><div class="line">print(list(matrix.flat)) ## 迭代器</div></pre></td></tr></table></figure><h2 id="Numpy-Array-合并-amp-amp-分割"><a href="#Numpy-Array-合并-amp-amp-分割" class="headerlink" title="Numpy Array 合并 &amp;&amp; 分割"></a>Numpy Array 合并 &amp;&amp; 分割</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">## Numpy array 合并</div><div class="line"></div><div class="line">a = np.array([[1,2,3],[4,5,6]])</div><div class="line">b = np.array([[4,5,6],[1,2,3]])</div><div class="line"></div><div class="line">c = np.vstack((a,b))</div><div class="line">print(c)</div><div class="line"></div><div class="line">d = np.hstack((a, b))</div><div class="line">print(d)</div><div class="line"></div><div class="line">tmp = np.array([1,2,3])</div><div class="line">print(tmp.shape)</div><div class="line">print(tmp[:, np.newaxis].shape)</div><div class="line">print(tmp[np.newaxis, :].shape)</div><div class="line"></div><div class="line"></div><div class="line">print(np.hstack((a,b)))</div><div class="line">print(np.concatenate((a, b), axis=1))</div><div class="line">print(np.vstack((a,b)))</div><div class="line">print(np.concatenate((a,b), axis=0))</div><div class="line"></div><div class="line">## numpy array 分割</div><div class="line"></div><div class="line">## 等分分割</div><div class="line">print(c)</div><div class="line">c_split = np.split(c, 2, axis=0)</div><div class="line">print(np.vsplit(c, 2))</div><div class="line">print(c_split)</div><div class="line"></div><div class="line">print(d)</div><div class="line">d_split = np.split(d, 2, axis=1)</div><div class="line">print(np.hsplit(d, 2))</div><div class="line">print(d_split)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">## 不等分分割</div><div class="line"></div><div class="line">not_split = np.array_split(c, 3, axis=0)</div><div class="line">print(not_split)</div></pre></td></tr></table></figure><h2 id="Numpy-Copy-and-Deep-Copy"><a href="#Numpy-Copy-and-Deep-Copy" class="headerlink" title="Numpy Copy and Deep Copy"></a>Numpy Copy and Deep Copy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">## numpy copy and deep copy</div><div class="line">a = np.array([[1,2,3]])</div><div class="line">print(a)</div><div class="line">b = a</div><div class="line">print(b is a)</div><div class="line">a[0][1] = 5</div><div class="line">print(a)</div><div class="line">print(b)</div><div class="line"></div><div class="line">## deep copy</div><div class="line">c = a.copy()</div><div class="line">print(a)</div><div class="line">print(c)</div><div class="line"></div><div class="line">a[0][1] = 8</div><div class="line">print(a)</div><div class="line">print(c)</div></pre></td></tr></table></figure><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/" target="_blank" rel="external">reference-mofan-numpy-tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      Numpy Summary.
    
    </summary>
    
      <category term="Machine Learning" scheme="http://frankchu0229.github.io/categories/Machine-Learning/"/>
    
    
      <category term="python" scheme="http://frankchu0229.github.io/tags/python/"/>
    
      <category term="dl" scheme="http://frankchu0229.github.io/tags/dl/"/>
    
      <category term="numpy" scheme="http://frankchu0229.github.io/tags/numpy/"/>
    
  </entry>
  
</feed>
